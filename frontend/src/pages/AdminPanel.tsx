import React, { useState, useEffect } from 'react';
import SettingsTab from '../components/SettingsTab';
import CompaniesTab from '../components/CompaniesTab';
import UsersTab from '../components/UsersTab';
import HardwareTab from '../components/HardwareTab';
import TemplatesTab from '../components/TemplatesTab';
import StatusesTab from '../components/StatusesTab';
// import HardwareTab from '../components/HardwareTab'; // –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
import type { User } from '../types/User';
import type { Company } from '../types/Company';
import type { HardwareItem } from '../types/HardwareItem';
import Header from '../components/Header';
import { useLocation, useNavigate } from 'react-router-dom';
import { fetchWithAuth } from '../utils/auth';
import { API_URL } from '../utils/api';

// –î–æ–±–∞–≤–ª—è—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ Window –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Header
declare global {
  interface Window {
    adminSetSection?: (key: string) => void;
    adminCurrentSection?: string;
    adminSetSubTab?: (sub: string) => void;
    adminCurrentSubTab?: string | null;
  }
}

const currencyOptions = ['GEL', 'USD', 'RR', 'BYN'];

interface AdminPanelProps {
  user: User;
  companies: Company[];
  selectedCompanyId: string;
  setSelectedCompanyId: (id: string) => void;
  setCompanies: (companies: Company[]) => void;
  onLogout: () => void;
}



const AdminPanel: React.FC<AdminPanelProps> = ({
  user,
  companies,
  selectedCompanyId,
  setSelectedCompanyId,
  setCompanies,
  onLogout,
}) => {
  // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getDefaultSection = () => {
    if (user?.role === 'superadmin') {
      return 'companies';
    } else {
      return 'users'; // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    }
  };
  
  const [section, setSection] = useState(getDefaultSection());
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [users, setUsers] = useState<User[]>([]);
  const [hardwareByCompany, setHardwareByCompany] = useState<Record<string, HardwareItem[]>>({});
  const [showAddCompany, setShowAddCompany] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const [isDataLoaded, setIsDataLoaded] = useState(false);
  const [isLoadingData, setIsLoadingData] = useState(false);
  
  // Debounce –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π
  const [debounceTimer, setDebounceTimer] = useState<number | null>(null);

  const location = useLocation();
  const navigate = useNavigate();

  // --- –ú–æ–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: —Å–∫—Ä—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä –µ—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ <1000px –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DevTools ---
  const [isMobile, setIsMobile] = useState(false);
  useEffect(() => {
    const check = () => setIsMobile(window.innerWidth < 1000); // –£–≤–µ–ª–∏—á–µ–Ω —Å 600px –¥–æ 1000px
    check();
    window.addEventListener('resize', check);
    return () => window.removeEventListener('resize', check);
  }, []);

  // –ü–æ–ª—É—á–∞–µ–º companyId –¥–ª—è admin/user
  let effectiveCompanyId = '';
  if (user && (user.role === 'admin' || user.role === 'user')) {
    effectiveCompanyId = typeof user.companyId === 'string' ? user.companyId : (user.companyId && typeof user.companyId === 'object' && '_id' in user.companyId ? user.companyId._id : '');
    
    // –ï—Å–ª–∏ —É –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç companyId, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
    if (!effectiveCompanyId && companies.length > 0) {
      effectiveCompanyId = companies[0]._id;
      console.log('üîß Admin has no companyId, using first available company:', companies[0]._id, companies[0].name);
    }
  } else if (user && user.role === 'superadmin' && companies.length > 0) {
    // –î–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞: –µ—Å–ª–∏ selectedCompanyId = 'all' –∏–ª–∏ –ø—É—Å—Ç–æ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º effectiveCompanyId –ø—É—Å—Ç—ã–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    effectiveCompanyId = selectedCompanyId === 'all' ? 'all' : selectedCompanyId;
  }

  console.log('üéØ AdminPanel effectiveCompanyId calculation:', { 
    role: user?.role, 
    originalSelectedCompanyId: selectedCompanyId,
    calculatedEffectiveCompanyId: effectiveCompanyId, 
    companiesCount: companies.length,
    userCompanyId: user?.companyId,
    allCompanies: companies.map(c => ({ id: c._id, name: c.name })),
    isLoadingData,
    isDataLoaded
  });

  console.log('üîç ADMIN DEBUG:', {
    userRole: user?.role,
    userCompanyId: user?.companyId,
    companiesAvailable: companies.length,
    firstCompany: companies[0] ? { id: companies[0]._id, name: companies[0].name } : null,
    finalEffectiveCompanyId: effectiveCompanyId,
    willTriggerDataLoad: effectiveCompanyId ? 'YES' : 'NO'
  });

  // --- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ —Å query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ---
  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const sectionParam = params.get('section') || getDefaultSection();
    if (sectionParam !== section) {
      setSection(sectionParam);
    }
  }, [location.search]);

  // --- –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è Header (–æ—Ç–¥–µ–ª—å–Ω—ã–π useEffect) ---
  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const subParam = params.get('sub');
    
    window.adminSetSection = (key: string) => {
      if (key === section || isTransitioning) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ª–∏—à–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
      if (debounceTimer) {
        clearTimeout(debounceTimer);
      }
      
      setIsTransitioning(true);
      const timer = window.setTimeout(() => {
        setSection(key);
        setIsTransitioning(false);
        setDebounceTimer(null);
        if (key === getDefaultSection()) {
          navigate('/admin', { replace: true });
        } else {
          navigate(`/admin?section=${key}`, { replace: true });
        }
      }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
      
      setDebounceTimer(timer);
    };
    window.adminCurrentSection = section;
    
    // –î–ª—è –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫ hardware
    window.adminSetSubTab = (sub: string) => {
      const params = new URLSearchParams(location.search);
      params.set('section', 'hardware');
      params.set('sub', sub);
      navigate(`/admin?${params.toString()}`, { replace: true });
    };
    window.adminCurrentSubTab = subParam;
  }, [section, navigate, location.search]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  const loadAllAdminData = async () => {
    console.log('üöÄ loadAllAdminData called:', { 
      isLoadingData, 
      isDataLoaded, 
      effectiveCompanyId, 
      companiesCount: companies.length,
      userRole: user.role 
    });
    if (isLoadingData) {
      console.log('‚è≠Ô∏è Skipping loadAllAdminData - already loading');
      return;
    }
    
    console.log('üîÑ Starting loadAllAdminData...');
    setIsLoadingData(true);
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      let usersUrl = `${API_URL}/users`;
      // –î–ª—è superadmin –ø–µ—Ä–µ–¥–∞–µ–º companyId –≤ query —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è
      // –ï—Å–ª–∏ effectiveCompanyId = 'all' –∏–ª–∏ –ø—É—Å—Ç–æ–π, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º companyId)
      if (user.role === 'superadmin' && effectiveCompanyId && effectiveCompanyId !== 'all') {
        usersUrl += `?companyId=${effectiveCompanyId}`;
      }
      // –î–ª—è admin/user —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
      
      console.log('Loading users:', { usersUrl, effectiveCompanyId, userRole: user.role });
      
      const usersPromise = fetchWithAuth(usersUrl, undefined, true)
        .then((res: unknown) => {
          console.log('Users response:', res);
          const response = res as Response;
          if (response.status === 401) {
            console.error('Unauthorized - redirecting to login');
            onLogout();
            return [];
          }
          return response.json();
        })
        .then((data: unknown) => {
          console.log('Users data received:', data);
          if (Array.isArray(data)) {
            console.log('Users detailed:', data.map(u => ({ 
              id: u._id, 
              username: u.username, 
              email: u.email, 
              role: u.role,
              companyId: u.companyId 
            })));
            setUsers(data);
            console.log('Users set:', data.length, 'users');
          } else {
            console.log('Users data is not array:', data);
            setUsers([]);
          }
        })
        .catch((error) => {
          console.error('Error loading users:', error);
          setUsers([]);
        });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
      let companiesToLoad: Company[] = [];
      if (user.role === 'superadmin') {
        // Superadmin - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞)
        if (effectiveCompanyId && effectiveCompanyId !== 'all') {
          const selectedCompany = companies.find(c => c._id === effectiveCompanyId);
          if (selectedCompany) {
            companiesToLoad = [selectedCompany];
          }
        }
        // –ï—Å–ª–∏ effectiveCompanyId = 'all' –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º hardware
      } else {
        // Admin/User - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–ª—è —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ (—Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é)
        if (effectiveCompanyId) {
          companiesToLoad = [{ _id: effectiveCompanyId, name: '–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è' }];
        }
      }
      
      console.log('Loading hardware for companies:', companiesToLoad.map(c => ({ id: c._id, name: c.name })));
      const hardwarePromises = companiesToLoad.map(async (company) => {
        try {
          console.log(`Loading hardware for company ${company.name} (${company._id})`);
          const res = await fetchWithAuth(`${API_URL}/hardware?companyId=${company._id}`, undefined, true);
          if (res.status === 401) {
            console.error('Unauthorized - redirecting to login');
            onLogout();
            return { companyId: company._id, data: [] };
          }
          const data = await res.json();
          console.log(`Hardware loaded for ${company.name}:`, data);
          return { companyId: company._id, data: Array.isArray(data) ? data : [] };
        } catch (error) {
          console.error(`Failed to load hardware for ${company.name}:`, error);
          return { companyId: company._id, data: [] };
        }
      });

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      await Promise.all([usersPromise, ...hardwarePromises.map(async (promise) => {
        const result = await promise;
        console.log('Setting hardware for company:', result.companyId, result.data);
        setHardwareByCompany(prev => ({ ...prev, [result.companyId]: result.data }));
      })]);

      console.log('All admin data loaded successfully');
      setIsDataLoaded(true);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:', error);
    } finally {
      setIsLoadingData(false);
      console.log('loadAllAdminData finished, current hardwareByCompany state will be updated');
    }
  };

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –±–µ–∑ companyId - –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π
  useEffect(() => {
    if (user?.role === 'admin' && !user.companyId && companies.length > 0 && !isDataLoaded && !isLoadingData) {
      console.log('üîß Admin without companyId detected after companies loaded, triggering data load');
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      setIsDataLoaded(false);
      setIsLoadingData(false);
      loadAllAdminData();
    }
  }, [user?.role, user?.companyId, companies.length, isDataLoaded, isLoadingData]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ effectiveCompanyId
  useEffect(() => {
    console.log('AdminPanel data loading useEffect:', { effectiveCompanyId, companiesLength: companies.length });
    
    // –î–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞: –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –ò –µ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏
    // –î–ª—è –∞–¥–º–∏–Ω–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –µ—Å—Ç—å effectiveCompanyId (–∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω—É–∂–Ω—ã)
    const shouldLoadData = user.role === 'superadmin' 
      ? (effectiveCompanyId && effectiveCompanyId !== 'all' && companies.length > 0)
      : (effectiveCompanyId);
    
    console.log('üîÑ shouldLoadData calculation:', {
      userRole: user.role,
      effectiveCompanyId,
      companiesLength: companies.length,
      isSupeadmin: user.role === 'superadmin',
      superadminCondition: effectiveCompanyId && effectiveCompanyId !== 'all' && companies.length > 0,
      adminCondition: effectiveCompanyId && companies.length > 0,
      finalShouldLoadData: shouldLoadData
    });
    
    if (shouldLoadData) {
      console.log('‚úÖ Calling loadAllAdminData from useEffect');
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
      setIsDataLoaded(false);
      setIsLoadingData(false);
      loadAllAdminData();
    } else {
      console.log('‚ùå Not calling loadAllAdminData:', { 
        hasCompanyId: !!effectiveCompanyId, 
        hasCompanies: companies.length > 0,
        userRole: user.role,
        shouldLoadData 
      });
    }
  }, [effectiveCompanyId, companies.length, user.role]);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π hardwareByCompany –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  useEffect(() => {
    console.log('hardwareByCompany updated:', hardwareByCompany);
  }, [hardwareByCompany]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  const refreshUsers = async () => {
    let usersUrl = `${API_URL}/users`;
    // –î–ª—è superadmin –ø–µ—Ä–µ–¥–∞–µ–º companyId –≤ query —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è
    // –ï—Å–ª–∏ effectiveCompanyId = 'all' –∏–ª–∏ –ø—É—Å—Ç–æ–π, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º companyId)
    if (user.role === 'superadmin' && effectiveCompanyId && effectiveCompanyId !== 'all') {
      usersUrl += `?companyId=${effectiveCompanyId}`;
    }
    // –î–ª—è admin/user —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
    console.log('Refreshing users:', { usersUrl, effectiveCompanyId, userRole: user.role });
    try {
      const res = await fetchWithAuth(usersUrl, undefined, true);
      if (res.status === 401) {
        console.error('Unauthorized - redirecting to login');
        onLogout();
        return;
      }
      const data = await res.json();
      console.log('Refresh users data received:', data);
      if (Array.isArray(data)) {
        setUsers(data);
        console.log('Users refreshed:', data.length, 'users');
      } else {
        console.log('Refresh users data is not array:', data);
        setUsers([]);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
  };

  const refreshHardware = async (companyId: string) => {
    try {
      const res = await fetchWithAuth(`${API_URL}/hardware?companyId=${companyId}`, undefined, true);
      if (res.status === 401) {
        console.error('Unauthorized - redirecting to login');
        onLogout();
        return;
      }
      const data = await res.json();
      setHardwareByCompany(prev => ({ 
        ...prev, 
        [companyId]: Array.isArray(data) ? data : [] 
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã:', error);
    }
  };



  // --- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É '–ö–æ–º–ø–∞–Ω–∏–∏', –µ—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏–π –Ω–µ—Ç –∏ superadmin ---
  useEffect(() => {
    if (
      user?.role === 'superadmin' &&
      companies.length === 0 &&
      section !== 'companies'
    ) {
      setSection('companies');
      navigate('/admin?section=companies');
    }
  }, [user, companies, section, navigate]);

  // --- Cleanup —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ---
  useEffect(() => {
    return () => {
      if (debounceTimer) {
        clearTimeout(debounceTimer);
      }
    };
  }, [debounceTimer]);

  if (!user || (user.role !== 'admin' && user.role !== 'superadmin')) {
    return <div style={{ padding: 32, textAlign: 'center', color: 'crimson', fontSize: 20 }}>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</div>;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ —Ä–æ–ª–∏
  const sections = [
    ...(user && user.role === 'superadmin' ? [{ key: 'companies', label: '–ö–æ–º–ø–∞–Ω–∏–∏' }] : []),
    { key: 'users', label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' },
    { key: 'hardware', label: '–¶–µ–Ω—ã' },
    { key: 'templates', label: '–®–∞–±–ª–æ–Ω—ã' },
    { key: 'statuses', label: '–°—Ç–∞—Ç—É—Å—ã' },
    { key: 'settings', label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' },
  ];

  return (
    <div style={{ minHeight: '100vh', background: '#f6f8fa' }}>
      <Header 
        user={user} 
        companies={companies} 
        selectedCompanyId={effectiveCompanyId} 
        setSelectedCompanyId={setSelectedCompanyId} 
        onLogout={onLogout} 
      />
      {/* Main content */}
      <div style={{ display: 'flex', marginTop: 56, minHeight: 'calc(100vh - 56px)' }}>
        {/* Sidebar */}
        {!isMobile && (
          <nav className="admin-sidebar" style={{ 
            width: 200, 
            minWidth: 200, 
            maxWidth: 200,
            background: '#fff', 
            borderRight: '1px solid #eee', 
            padding: '24px 0', 
            height: 'calc(100vh - 56px)',
            overflow: 'auto',
            position: 'relative',
            flexShrink: 0
          }}>
            {sections.map((s) => (
              <div
                key={s.key}
                onClick={() => {
                  if (s.key === section || isTransitioning) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–∫ –Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –∏–ª–∏ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∞
                  if (window.adminSetSection) {
                    window.adminSetSection(s.key);
                  } else {
                    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
                    if (debounceTimer) {
                      clearTimeout(debounceTimer);
                    }
                    
                    setIsTransitioning(true);
                    const timer = window.setTimeout(() => {
                      setSection(s.key);
                      setIsTransitioning(false);
                      setDebounceTimer(null);
                    }, 100);
                    
                    setDebounceTimer(timer);
                  }
                }}
                style={{
                  padding: '14px 32px',
                  cursor: 'pointer',
                  background: section === s.key ? '#f6f8ff' : 'none',
                  fontWeight: section === s.key ? 700 : 400,
                  color: section === s.key ? '#646cff' : '#333',
                  borderLeft: section === s.key ? '4px solid #646cff' : '4px solid transparent',
                  transition: 'background 0.2s',
                  marginBottom: 2,
                  pointerEvents: 'auto',
                  opacity: 1,
                }}
              >
                {s.label}
              </div>
            ))}
          </nav>
        )}
        {/* Content */}
        <div className="admin-content" style={{ 
          flex: 1, 
          padding: section === 'hardware' ? 0 : (isMobile ? 8 : 20), // –£–±–∏—Ä–∞–µ–º padding –¥–ª—è hardware
          background: isMobile ? '#fff' : '#f6f8fa', 
          minHeight: 'calc(100vh - 56px)',
          position: 'relative',
          opacity: isTransitioning ? 0.7 : 1,
          transition: 'opacity 0.1s ease-in-out',
          maxWidth: '100%', // –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã
          overflow: 'auto' // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }}>
          {/* –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π */}
          {companies == null || isLoadingData ? (
            <div style={{ padding: 32 }}>
              {companies == null ? '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π...' : '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...'}
            </div>
          ) : section === 'companies' ? (
            <>
              {user.role === 'superadmin' && companies.length === 0 && (
                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 24 }}>
                  <button
                    onClick={() => setShowAddCompany(true)}
                    style={{
                      padding: '16px 24px',
                      borderRadius: 8,
                      fontSize: 18,
                      background: '#646cff',
                      color: '#fff',
                      border: 'none',
                      cursor: 'pointer',
                    }}
                  >
                    –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é
                  </button>
                </div>
              )}
              <CompaniesTab
                companies={companies}
                selectedCompanyId={effectiveCompanyId}
                setSelectedCompanyId={setSelectedCompanyId}
                setCompanies={setCompanies}
                user={user}
                fetchWithAuth={fetchWithAuth}
                onLogout={onLogout}
                showAddCompany={showAddCompany}
                setShowAddCompany={setShowAddCompany}
              />
            </>
          ) : section === 'users' ? (
            <UsersTab
              users={users}
              companies={companies}
              selectedCompanyId={effectiveCompanyId}
              userRole={user.role}
              fetchWithAuth={fetchWithAuth}
              onRefreshUsers={refreshUsers}
            />
          ) : section === 'statuses' ? (
            <StatusesTab
              selectedCompanyId={effectiveCompanyId}
              fetchWithAuth={fetchWithAuth}
              onRefreshStatuses={() => {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                console.log('Statuses updated, refreshing related data...');
              }}
            />
          ) : section === 'hardware' ? (
            <HardwareTab
              companies={companies}
              selectedCompanyId={effectiveCompanyId}
              user={user}
              onLogout={onLogout}
              activeSubTab={new URLSearchParams(location.search).get('sub') || ''}
              onChangeSubTab={(sub: string) => {
                const params = new URLSearchParams(location.search);
                params.set('section', 'hardware');
                params.set('sub', sub);
                navigate(`/admin?${params.toString()}`);
              }}
              onRefreshHardware={refreshHardware}
            />
          ) : section === 'templates' ? (
            <TemplatesTab
              companies={companies}
              selectedCompanyId={effectiveCompanyId}
            />
          ) : section === 'settings' ? (
            <SettingsTab
              currencyOptions={currencyOptions}
              company={companies.find(c => c._id === effectiveCompanyId) || null}
              companies={companies}
              selectedCompanyId={effectiveCompanyId}
            />
          ) : null}
        </div>
      </div>
      <style>{`
        /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—Ä–æ–∂–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–æ–∫ */
        .admin-content {
          transform: translateZ(0);
          backface-visibility: hidden;
          -webkit-backface-visibility: hidden;
        }
        
        .admin-content > * {
          transform: translateZ(0);
          backface-visibility: hidden;
          -webkit-backface-visibility: hidden;
        }
        
        /* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ */
        .admin-sidebar, .admin-content {
          will-change: auto;
        }
        
        /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –º–∏–≥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ */
        .admin-sidebar div {
          transform: translateZ(0);
        }
        
        @media (max-width: 1000px) {
          .admin-content {
            padding: 8px !important;
            background: #fff !important;
            color: #333 !important;
            width: 100% !important;
            min-width: 0 !important;
            min-height: calc(100vh - 56px) !important;
            max-width: 100% !important;
            overflow-x: auto !important;
          }
          .admin-content * {
            color: #333 !important;
          }
          .admin-content h1, .admin-content h2, .admin-content h3 {
            color: #333 !important;
          }
          .admin-content th, .admin-content td {
            color: #333 !important;
          }
          .admin-content div, .admin-content span, .admin-content p {
            color: #333 !important;
          }
          .admin-sidebar {
            display: none !important;
          }
          body, html, #root, .App, .admin-panel-root {
            background: #fff !important;
            color: #333 !important;
          }
        }
      `}</style>
    </div>
  );
}

export default AdminPanel; 