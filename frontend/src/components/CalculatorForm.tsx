import React, { useState, useEffect } from 'react';
import AddHardwareButton from './AddHardwareButton';
import AddHardwareDialog, { type HardwareDialogItem, type HardwareItem } from './AddHardwareDialog';
import { QuantityControl } from './AddHardwareDialog';
import type { User } from '../types/User';
import type { DraftProjectData } from './CalculationDetails';
import type { Project } from './ProjectHistory';
import { API_URL as BASE_API_URL, updateProjectStatus, updateProject } from '../utils/api';
import { fetchWithAuth } from '../utils/auth';
import AddServiceDialog, { type ServiceItem as DialogServiceItem } from './AddServiceDialog';

interface TemplateField {
  name: string;
  type: 'text' | 'number' | 'select';
  label: string;
  required: boolean;
  options?: string[];
}

interface GlassConfig {
  name: string;
  type: 'stationary' | 'swing_door' | 'sliding_door';
}

interface Template {
  _id: string;
  name: string;
  type: string;
  description?: string;
  fields: TemplateField[];
  glassConfig?: GlassConfig[];
  customColorOption: boolean;
  exactHeightOption?: boolean;
  defaultGlassColor?: string;
  defaultGlassThickness?: string;
  defaultHardware: string[];
  defaultServices: string[];
  sizeAdjustments?: {
    doorHeightReduction: number;
    thresholdReduction: number;
  };
  isSystem?: boolean;
}

const HARDWARE_COLORS = [
  { value: '', label: '' },
  { value: 'chrome', label: '–•—Ä–æ–º' },
  { value: 'black', label: '–ß–µ—Ä–Ω—ã–π' },
  { value: 'matte', label: '–ú–∞—Ç–æ–≤—ã–π' },
  { value: 'gold', label: '–ó–æ–ª–æ—Ç–æ–π' },
  { value: 'painted', label: '–ö—Ä–∞—à–µ–Ω–Ω—ã–π' },
];

const GLASS_THICKNESS = [
  { value: '8', label: '8 –º–º' },
  { value: '10', label: '10 –º–º' },
];

interface Settings {
  currency: string;
  usdRate: string;
  rrRate: string;
  showUSD: boolean;
  showRR: boolean;
  baseCosts: { id: string; name: string; value: number }[];
  baseIsPercent: boolean;
  basePercentValue: number;
  customColorSurcharge?: number;
  baseCostMode?: 'fixed' | 'percentage';
  baseCostPercentage?: number;
  glassList?: { color: string; thickness?: string; thickness_mm?: number; price: number; companyId: string }[];
  hardwareList?: { _id?: string; name: string; price: number; companyId?: string }[];
  statusList?: { _id: string; name: string; color: string; order: number }[]; // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
}

interface CalculatorFormProps {
  companyId?: string;
  user?: User | null;
  selectedCompanyId?: string;
  settings?: Settings | null; // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ø –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
  isLoadingData?: boolean; // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  onChangeDraft?: (draft: DraftProjectData) => void;
  selectedProject?: Project;
  onNewProject?: (project?: Project) => void;
  totalPrice?: number;
}

const CalculatorForm: React.FC<CalculatorFormProps> = ({ companyId, user, selectedCompanyId = '', settings: propsSettings, isLoadingData, onChangeDraft, selectedProject, onNewProject, totalPrice }) => {
  const [projectName, setProjectName] = useState('');
  const [customer, setCustomer] = useState('');
  const [config, setConfig] = useState('');
  const [draftConfig, setDraftConfig] = useState(config);
  const [glassColors, setGlassColors] = useState<string[]>([]);
  const [glassColor, setGlassColor] = useState('');
  const [glassThickness, setGlassThickness] = useState('10');
  const [hardwareColor, setHardwareColor] = useState('');
  const [width, setWidth] = useState('');
  const [height, setHeight] = useState('');
  const [length, setLength] = useState('');
  const [comment, setComment] = useState('');
  const [delivery, setDelivery] = useState(true);
  const [installation, setInstallation] = useState(true);
  const [showGlassSizes, setShowGlassSizes] = useState(false);
  const [showAddHardwareDialog, setShowAddHardwareDialog] = useState(false);
  const [hardwareList, setHardwareList] = useState<HardwareItem[]>([]);
  const [projectHardware, setProjectHardware] = useState<HardwareDialogItem[]>([]);
  const [saveStatus, setSaveStatus] = useState<'idle' | 'success' | 'error'>('idle');
  const [errors, setErrors] = useState<{ [key: string]: string }>({});
  const [status, setStatus] = useState('–†–∞—Å—Å—á–µ—Ç');
  const [manualPrice, setManualPrice] = useState<number | undefined>(undefined);
  const [changedFields, setChangedFields] = useState<Set<string>>(new Set());
  const [stationarySize, setStationarySize] = useState('');
  const [doorSize, setDoorSize] = useState('');
  const [stationaryWidth, setStationaryWidth] = useState('');
  const [doorWidth, setDoorWidth] = useState('');
  const [exactHeight, setExactHeight] = useState(false);
  const [uniqueGlasses, setUniqueGlasses] = useState([
    { name: '–°—Ç–µ–∫–ª–æ 1', color: '–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π', thickness: GLASS_THICKNESS[0]?.value || '', width: '', height: '' }
  ]);
  const [uniqueGlassErrors, setUniqueGlassErrors] = useState<{ [idx: number]: { [field: string]: string } }>({});
  const [dismantling, setDismantling] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [showAddServiceDialog, setShowAddServiceDialog] = useState(false);
  const [selectedServices, setSelectedServices] = useState<DialogServiceItem[]>([]);
  const [serviceList, setServiceList] = useState<DialogServiceItem[]>([]);
  const [customColor, setCustomColor] = useState(false);
  const [templates, setTemplates] = useState<Template[]>([]);
  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);
  const [templateFields, setTemplateFields] = useState<{ [key: string]: string }>({});
  const [templateGlasses, setTemplateGlasses] = useState<{[glassIndex: number]: {width: string, height: string, hasThreshold?: boolean}}>({});
  // resolvedCompanyId –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º selectedCompanyId
  const effectiveCompanyId = user?.role === 'superadmin' ? selectedCompanyId : (companyId || localStorage.getItem('companyId') || '');

  // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
  useEffect(() => {
    if (selectedProject) {
      setProjectName(selectedProject.name || '');
      setCustomer(selectedProject.customer || '');
      setConfig(selectedProject.data?.config === 'straight-opening' || selectedProject.data?.config === 'straight-glass' ? 'straight' : (selectedProject.data?.config || ''));
      setDraftConfig(selectedProject.data?.config || '');
      setGlassColor(selectedProject.data?.glassColor || '');
      setGlassThickness(selectedProject.data?.glassThickness || '8');
      setHardwareColor(selectedProject.data?.hardwareColor || '');
      setLength(selectedProject.data?.length || '');
      setComment(selectedProject.data?.comment || '');
      setDelivery(selectedProject.data?.delivery !== undefined ? selectedProject.data.delivery : true);
      setInstallation(selectedProject.data?.installation !== undefined ? selectedProject.data.installation : true);
      setDismantling(selectedProject.data?.dismantling || false);
      setProjectHardware(Array.isArray(selectedProject.data?.projectHardware) ? selectedProject.data.projectHardware : []);
      const projectStatus = selectedProject.statusId?.name || selectedProject.status || '–†–∞—Å—Å—á–µ—Ç';
      console.log('üîÑ Setting initial status:', { 
        projectStatus, 
        fromStatusId: selectedProject.statusId?.name,
        fromStatus: selectedProject.status,
        availableStatuses: propsSettings?.statusList?.map(s => s.name) || []
      });
      setStatus(projectStatus);
      setCustomColor(selectedProject.data?.customColor || false);
      setStationarySize(selectedProject.data?.stationarySize || '');
      setDoorSize(selectedProject.data?.doorSize || '');
      setExactHeight(selectedProject.data?.exactHeight || false);
      setManualPrice(undefined);
      // –î–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ–º uniqueGlasses
      if (selectedProject.data?.uniqueGlasses && Array.isArray(selectedProject.data.uniqueGlasses)) {
        setUniqueGlasses(selectedProject.data.uniqueGlasses);
      } else {
        setUniqueGlasses([
          { name: '–°—Ç–µ–∫–ª–æ 1', color: '–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π', thickness: GLASS_THICKNESS[0]?.value || '', width: '', height: '' }
        ]);
      }
      setUniqueGlassErrors({});
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ –ø—Ä–æ–µ–∫—Ç–∞
      if (selectedProject.data?.projectServices && Array.isArray(selectedProject.data.projectServices)) {
        setSelectedServices(selectedProject.data.projectServices);
      } else {
        // –ï—Å–ª–∏ —É –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç —É—Å–ª—É–≥, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        setSelectedServices([]);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ –µ—Å–ª–∏ —ç—Ç–æ —à–∞–±–ª–æ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
      if (selectedProject.data?.templateFields && typeof selectedProject.data.templateFields === 'object') {
        setTemplateFields(selectedProject.data.templateFields);
      } else {
        setTemplateFields({});
      }
      
      if (selectedProject.data?.templateGlasses && typeof selectedProject.data.templateGlasses === 'object') {
        setTemplateGlasses(selectedProject.data.templateGlasses);
      } else {
        setTemplateGlasses({});
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–Ω–∞—è
      if (selectedProject.data?.config && selectedProject.data.config.startsWith('template-')) {
        const templateId = selectedProject.data.config.replace('template-', '');
        fetchWithAuth(`${BASE_API_URL}/templates/${templateId}`)
          .then(res => res.json())
          .then(template => {
            setSelectedTemplate(template);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
            if (template.defaultGlassColor && !selectedProject.data?.glassColor) {
              setGlassColor(template.defaultGlassColor);
            }
            if (template.defaultGlassThickness && !selectedProject.data?.glassThickness) {
              setGlassThickness(template.defaultGlassThickness);
            }
            if (template.exactHeightOption && selectedProject.data?.exactHeight === undefined) {
              setExactHeight(false); // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ü–∏–∏
            }
          })
          .catch(() => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞');
            setSelectedTemplate(null);
          });
      } else {
        setSelectedTemplate(null);
      }
      // –°–Ω–∞—á–∞–ª–∞ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º showGlassSizes, –∑–∞—Ç–µ–º –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ä–µ–∑ setTimeout
      setShowGlassSizes(selectedProject.data?.showGlassSizes || false);
      setTimeout(() => {
        if (selectedProject.data?.showGlassSizes) {
          setStationaryWidth(selectedProject.data?.stationaryWidth || '');
          setDoorWidth(selectedProject.data?.doorWidth || '');
          setHeight(selectedProject.data?.height || '');
        } else {
          setWidth(selectedProject.data?.width || '');
          setHeight(selectedProject.data?.height || '');
        }
        setChangedFields(new Set());
      }, 0);
    }
  }, [selectedProject, serviceList]);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    if (propsSettings) {
      console.log('CalculatorForm: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', propsSettings);
      console.log('üìä Status list from settings:', propsSettings.statusList);
      
      // –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É glassList
      console.log('üîç –û–¢–õ–ê–î–ö–ê glassList:', propsSettings.glassList);
      console.log('üîç –û–¢–õ–ê–î–ö–ê glassList Array?:', Array.isArray(propsSettings.glassList));
      if (Array.isArray(propsSettings.glassList)) {
        console.log('üîç –û–¢–õ–ê–î–ö–ê glassList.length:', propsSettings.glassList.length);
        propsSettings.glassList.forEach((glass, index) => {
          console.log(`üîç –û–¢–õ–ê–î–ö–ê glass[${index}]:`, glass);
        });
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ hardwareList —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å _id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      const hardwareData = Array.isArray(propsSettings.hardwareList) 
        ? propsSettings.hardwareList.map((item, index) => ({
            _id: item._id || `temp-${index}`,
            name: item.name,
            price: item.price,
            companyId: item.companyId
          }))
        : [];
      setHardwareList(hardwareData);
      
      // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Å—Ç–µ–∫–ª–∞ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
      let uniqueColors: string[] = [];
      if (Array.isArray(propsSettings.glassList) && propsSettings.glassList.length > 0) {
        const colors = propsSettings.glassList
          .map((glass: { color: string; thickness?: string; thickness_mm?: number; price: number; companyId: string }) => {
            console.log('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º glass:', glass, 'color:', glass?.color);
            return glass?.color;
          })
          .filter((color: string | undefined) => {
            const isValid = color && typeof color === 'string' && color.trim() !== '';
            console.log('üîç Color valid?', color, '‚Üí', isValid);
            return isValid;
          }) as string[];
        
        uniqueColors = Array.from(new Set(colors));
        console.log('üîç –í—Å–µ —Ü–≤–µ—Ç–∞ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', colors);
        console.log('üîç –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞:', uniqueColors);
      } else {
        console.log('üîç glassList –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤');
      }
      
      console.log('üîç –§–ò–ù–ê–õ–¨–ù–´–ï uniqueColors:', uniqueColors);
      setGlassColors(uniqueColors);
      
      if (uniqueColors.length > 0) {
        setGlassColor(uniqueColors[0]);
        console.log('üîç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–≤—ã–π —Ü–≤–µ—Ç:', uniqueColors[0]);
      } else {
        setGlassColor('');
        console.log('üîç –ù–ï–¢ –¶–í–ï–¢–û–í - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É');
      }
    } else {
      console.log('CalculatorForm: –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      setHardwareList([]);
      setGlassColors([]);
      setGlassColor('');
    }
  }, [propsSettings]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
  useEffect(() => {
    if (!effectiveCompanyId) return;
    fetchWithAuth(`${BASE_API_URL}/services?companyId=${effectiveCompanyId}`)
      .then(res => res.json())
      .then(data => {
        const list: DialogServiceItem[] = (Array.isArray(data) ? data : []).map((s: { serviceId?: string; name: string; price: number }) => ({
          serviceId: s.serviceId || s.name,
          name: s.name,
          price: s.price
        }));
        setServiceList(list);
        
        // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∫–∞–∫–∏–µ —É—Å–ª—É–≥–∏
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –∏—Ö —Å–∞–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É"
      })
      .catch(() => setServiceList([]));
  }, [effectiveCompanyId, selectedProject]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
  useEffect(() => {
    if (!effectiveCompanyId) return;
    fetchWithAuth(`${BASE_API_URL}/templates/active?companyId=${effectiveCompanyId}`)
      .then(res => res.json())
      .then(data => {
        setTemplates(Array.isArray(data) ? data : []);
      })
      .catch(() => setTemplates([]));
  }, [effectiveCompanyId]);

  // –•–µ–ª–ø–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è draft
  const updateDraft = React.useCallback(() => {
    if (onChangeDraft) {
      onChangeDraft({
        projectName,
        config: draftConfig,
        glassColor,
        glassThickness,
        hardwareColor,
        width,
        height,
        length,
        comment,
        delivery,
        installation,
        dismantling,
        projectHardware,
        showGlassSizes,
        stationarySize,
        doorSize,
        stationaryWidth,
        doorWidth,
        exactHeight,
        uniqueGlasses: draftConfig === 'unique' ? uniqueGlasses : undefined,
        projectServices: selectedServices,
        customColor,
        selectedTemplate: draftConfig.startsWith('template-') ? selectedTemplate : undefined,
        templateFields: draftConfig.startsWith('template-') ? templateFields : undefined,
        templateGlasses: draftConfig.startsWith('template-') ? templateGlasses : undefined,
      });
    }
  }, [onChangeDraft, draftConfig, projectName, glassColor, glassThickness, hardwareColor, width, height, length, comment, delivery, installation, dismantling, projectHardware, showGlassSizes, stationarySize, doorSize, stationaryWidth, doorWidth, exactHeight, uniqueGlasses, selectedServices, customColor, selectedTemplate, templateFields, templateGlasses]);

  // useEffect –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ draft
  React.useEffect(() => {
    updateDraft();
  }, [updateDraft]);

  useEffect(() => {
    if (!selectedProject) return;
    const fields = [
      ['name', projectName, selectedProject.name || ''],
      ['customer', customer, selectedProject.customer || ''],
      ['config', config, selectedProject.data?.config || ''],
      ['glassColor', glassColor, selectedProject.data?.glassColor || ''],
      ['glassThickness', glassThickness, selectedProject.data?.glassThickness || '8'],
      ['hardwareColor', hardwareColor, selectedProject.data?.hardwareColor || ''],
      ['width', width, selectedProject.data?.width || ''],
      ['height', height, selectedProject.data?.height || ''],
      ['length', length, selectedProject.data?.length || ''],
      ['comment', comment, selectedProject.data?.comment || ''],
      ['delivery', delivery, selectedProject.data?.delivery !== undefined ? selectedProject.data.delivery : true],
      ['installation', installation, selectedProject.data?.installation !== undefined ? selectedProject.data.installation : true],
      ['dismantling', dismantling, selectedProject.data?.dismantling || false],
      ['status', status, selectedProject.statusId?.name || selectedProject.status || '–†–∞—Å—Å—á–µ—Ç'],
      ['manualPrice', manualPrice, selectedProject.price],
    ];
    const changed = new Set<string>();
    fields.forEach(([key, val, orig]) => {
      if (val !== orig) changed.add(key as string);
    });
    setChangedFields(changed);
  }, [projectName, customer, config, glassColor, glassThickness, hardwareColor, width, height, length, comment, delivery, installation, dismantling, status, manualPrice, selectedProject]);

  // 1. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª–µ–π –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
  const resetAllFields = (preserveName = false) => {
    if (!preserveName) setProjectName('');
    setCustomer('');
    setConfig('');
    setDraftConfig('');
    setGlassColor(glassColors[0] || '');
    setGlassThickness('8');
    setHardwareColor('');
    setWidth('');
    setHeight('');
    setLength('');
    setComment('');
    setDelivery(true);
    setInstallation(true);
    setProjectHardware([]);
    setStatus('–†–∞—Å—Å—á–µ—Ç');
    setErrors({});
    setSaveStatus('idle');
    setShowGlassSizes(false);
    setStationarySize('');
    setDoorSize('');
    setStationaryWidth('');
    setDoorWidth('');
    setManualPrice(undefined);
    setChangedFields(new Set());
    setExactHeight(false);
    setUniqueGlasses([
      { name: '–°—Ç–µ–∫–ª–æ 1', color: '–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π', thickness: GLASS_THICKNESS[0]?.value || '', width: '', height: '' }
    ]);
    setUniqueGlassErrors({});
    setDismantling(false);
    setSelectedServices([]); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
    setCustomColor(false);
    setSelectedTemplate(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
    setTemplateFields({}); // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞
    setTemplateGlasses({}); // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–µ–∫–æ–ª
  };

  // 2. –ü—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ‚Äî —Å–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª–µ–π, –∫—Ä–æ–º–µ projectName
  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ñ–æ–ª—Ç–æ–≤ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
  const loadSystemTemplateDefaults = async (configType: string) => {
    // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å —Ç–∏–ø–∞–º–∏ —à–∞–±–ª–æ–Ω–æ–≤
    const configTypeMapping: { [key: string]: string } = {
      'glass': 'glass',
      'straight': 'straight',
      'straight-glass': 'straight',
      'straight-opening': 'straight',
      'corner': 'corner',
      'unique': 'unique',
      'partition': 'partition'
    };

    const templateType = configTypeMapping[configType];
    if (!templateType || !effectiveCompanyId) {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞, –æ—á–∏—â–∞–µ–º —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É –∏ —É—Å–ª—É–≥–∏
      setProjectHardware([]);
      setSelectedServices([]);
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
      const res = await fetchWithAuth(`${BASE_API_URL}/templates/system?companyId=${effectiveCompanyId}`);
      if (!res.ok) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã');
        setProjectHardware([]);
        setSelectedServices([]);
        return;
      }

      const systemTemplates = await res.json();
      const systemTemplate = Array.isArray(systemTemplates) ? systemTemplates.find((t: { type: string }) => t.type === templateType) : null;

      if (systemTemplate) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É
        if (systemTemplate.defaultHardware && systemTemplate.defaultHardware.length > 0) {
          const defaultHw = systemTemplate.defaultHardware.map((name: string) => ({
            hardwareId: '',
            name,
            quantity: 1
          }));
          setProjectHardware(defaultHw);
        } else {
          setProjectHardware([]);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏
        if (systemTemplate.defaultServices && systemTemplate.defaultServices.length > 0) {
          const defaultServices = systemTemplate.defaultServices.map((serviceName: string) => {
            const foundService = Array.isArray(serviceList) ? serviceList.find(s => s.name === serviceName) : null;
            return foundService || {
              serviceId: serviceName,
              name: serviceName,
              price: 0
            };
          });
          setSelectedServices(defaultServices);
        } else {
          setSelectedServices([]);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–µ–∫–ª–∞
        if (systemTemplate.defaultGlassColor) {
          setGlassColor(systemTemplate.defaultGlassColor);
        }
        if (systemTemplate.defaultGlassThickness) {
          setGlassThickness(systemTemplate.defaultGlassThickness);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏
        if (systemTemplate.customColorOption) {
          setCustomColor(false); // –û–ø—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        if (systemTemplate.exactHeightOption) {
          setExactHeight(false); // –û–ø—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
      } else {
        // –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        // (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        const fallbackDefaults = getFallbackDefaults(configType);
        setProjectHardware(fallbackDefaults.hardware);
        setSelectedServices(fallbackDefaults.services);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const fallbackDefaults = getFallbackDefaults(configType);
      setProjectHardware(fallbackDefaults.hardware);
      setSelectedServices(fallbackDefaults.services);
    }
  };

  // –§–æ–ª–±—ç–∫ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const getFallbackDefaults = (configType: string) => {
    const defaults = {
      hardware: [] as Array<{ hardwareId: string; name: string; quantity: number }>,
      services: [] as Array<{ serviceId: string; name: string; price: number }>
    };

    if (configType === 'glass') {
      defaults.hardware = [
        { hardwareId: '', name: '–ü—Ä–æ—Ñ–∏–ª—å', quantity: 1 },
        { hardwareId: '', name: '–ü–∞–ª–∫–∞ —Å—Ç–µ–Ω–∞-—Å—Ç–µ–∫–ª–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è', quantity: 1 }
      ];
    } else if (["straight", "straight-glass", "straight-opening"].includes(configType)) {
      defaults.hardware = [
        { hardwareId: '', name: '–ü—Ä–æ—Ñ–∏–ª—å', quantity: 1 },
        { hardwareId: '', name: '–†–∞–∑–¥–≤–∏–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', quantity: 1 },
        { hardwareId: '', name: '–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è —Ç—Ä—É–±–∞ (—Ä–µ–ª—å—Å–∞)', quantity: 1 },
        { hardwareId: '', name: '–£–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª—å F', quantity: 2 },
        { hardwareId: '', name: '–£–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª—å A', quantity: 1 }
      ];
    } else if (configType === 'corner') {
      defaults.hardware = [
        { hardwareId: '', name: '–ü—Ä–æ—Ñ–∏–ª—å', quantity: 2 },
        { hardwareId: '', name: '–†–∞–∑–¥–≤–∏–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', quantity: 2 },
        { hardwareId: '', name: '–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è —Ç—Ä—É–±–∞ (—Ä–µ–ª—å—Å–∞)', quantity: 1 },
        { hardwareId: '', name: '—É–≥–æ–ª–æ–∫ —Ç—É—Ä–±–∞-—Ç—Ä—É–±–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–µ', quantity: 1 },
        { hardwareId: '', name: '–£–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª—å F', quantity: 4 }
      ];
    } else if (configType === 'unique') {
      defaults.hardware = [
        { hardwareId: '', name: '–ü—Ä–æ—Ñ–∏–ª—å', quantity: 1 },
        { hardwareId: '', name: '–ö—Ä–µ–ø–µ–∂', quantity: 1 }
      ];
    }

    return defaults;
  };

  const handleConfigChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const value = event.target.value;
    setConfig(value);
    setDraftConfig(value);
    setChangedFields(fields => new Set(fields).add('config'));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —à–∞–±–ª–æ–Ω
    if (value.startsWith('template-')) {
      const templateId = value.replace('template-', '');
      const template = Array.isArray(templates) ? templates.find(t => t._id === templateId) : null;
      
      if (template) {
        setSelectedTemplate(template);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ
        fetchWithAuth(`${BASE_API_URL}/templates/${templateId}`)
          .then(res => res.json())
          .then(fullTemplate => {
            setSelectedTemplate(fullTemplate);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if (fullTemplate.customColorOption) {
              setCustomColor(false); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–∞–º
            }
            if (fullTemplate.exactHeightOption) {
              setExactHeight(false); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–∞–º
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ü–≤–µ—Ç –∏ —Ç–æ–ª—â–∏–Ω—É —Å—Ç–µ–∫–ª–∞
            if (fullTemplate.defaultGlassColor) {
              setGlassColor(fullTemplate.defaultGlassColor);
            }
            if (fullTemplate.defaultGlassThickness) {
              setGlassThickness(fullTemplate.defaultGlassThickness);
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞
            const initialFields: { [key: string]: string } = {};
            fullTemplate.fields.forEach((field: { name: string }) => {
              initialFields[field.name] = '';
            });
            setTemplateFields(initialFields);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–µ–∫–æ–ª
            const initialGlasses: {[glassIndex: number]: {width: string, height: string, hasThreshold?: boolean}} = {};
            if (fullTemplate.glassConfig && Array.isArray(fullTemplate.glassConfig)) {
              for (let index = 0; index < fullTemplate.glassConfig.length; index++) {
                initialGlasses[index] = { width: '', height: '', hasThreshold: false };
              }
            }
            setTemplateGlasses(initialGlasses);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if (fullTemplate.defaultHardware && fullTemplate.defaultHardware.length > 0) {
              const defaultHw = fullTemplate.defaultHardware.map((name: string) => ({
                hardwareId: '',
                name,
                quantity: 1
              }));
              setProjectHardware(defaultHw);
            } else {
              setProjectHardware([]);
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (fullTemplate.defaultServices && fullTemplate.defaultServices.length > 0) {
              const defaultServices = fullTemplate.defaultServices.map((serviceName: string) => {
                // –ò—â–µ–º —É—Å–ª—É–≥—É –≤ —Å–ø–∏—Å–∫–µ serviceList –ø–æ –∏–º–µ–Ω–∏
                const foundService = Array.isArray(serviceList) ? serviceList.find(s => s.name === serviceName) : null;
                return foundService || {
                  serviceId: serviceName,
                  name: serviceName,
                  price: 0 // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É 0
                };
              });
              setSelectedServices(defaultServices);
            } else {
              setSelectedServices([]);
            }
          })
          .catch(() => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞');
            setSelectedTemplate(null);
          });
      }
      return;
    } else {
      // –û–±—ã—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω
      setSelectedTemplate(null);
      setTemplateFields({});
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ "–ü–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞"
    if (value === 'partition') {
      setGlassColor('–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π');
      setGlassThickness('10');
    }
    
    // –ü—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å–ª—É–≥–∏
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –∏—Ö —Å–∞–º
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É –∏ —É—Å–ª—É–≥–∏ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    loadSystemTemplateDefaults(value);
  };

  // 3. –ü—Ä–∏ —Å–º–µ–Ω–µ –æ–ø—Ü–∏–∏ '—Ä–∞–∑–º–µ—Ä—ã –ø—Ä–æ—ë–º–∞/—Ä–∞–∑–º–µ—Ä—ã —Å—Ç–µ–∫–ª–∞' ‚Äî —Å–±—Ä–æ—Å –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
  useEffect(() => {
    if (!selectedProject && config === 'straight') {
      setDraftConfig(showGlassSizes ? 'straight-glass' : 'straight-opening');
      setWidth('');
      setHeight('');
      setLength('');
      setStationaryWidth('');
      setDoorWidth('');
      setStationarySize('');
      setDoorSize('');
    } else if (!selectedProject) {
      setDraftConfig(config);
    }
  }, [config, showGlassSizes, selectedProject]);

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç–µ–∫–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  useEffect(() => {
    if (config === 'straight' && width && height && !showGlassSizes) {
      const w = Number(width);
      const h = Number(height);
      const partWidth = (w + 30) / 2;
      if (exactHeight) {
        setStationarySize(`${Math.round(partWidth)} √ó ${Math.round(h - 3)} –º–º`);
        setDoorSize(`${Math.round(partWidth)} √ó ${Math.round(h - 11)} –º–º`);
      } else {
        setStationarySize(`${Math.round(partWidth)} √ó ${Math.round(h)} –º–º`);
        setDoorSize(`${Math.round(partWidth)} √ó ${Math.round(h - 8)} –º–º`);
      }
    } else {
      setStationarySize('');
      setDoorSize('');
    }
  }, [config, width, height, showGlassSizes, exactHeight]);

  // –ü–µ—Ä–µ–Ω–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ showGlassSizes
  useEffect(() => {
    if (showGlassSizes) {
      setWidth('');
    } else {
      setStationaryWidth('');
      setDoorWidth('');
    }
    // height –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
  }, [showGlassSizes]);



  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = () => {
          const newErrors: { [key: string]: string } = {};
      if (!projectName.trim()) newErrors.projectName = '–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞';
      if (!customer.trim()) newErrors.customer = '–£–∫–∞–∂–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞';
      if (!config) newErrors.config = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é';
    if (!glassColor) newErrors.glassColor = '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç–µ–∫–ª–∞';
    if (!glassThickness) newErrors.glassThickness = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É —Å—Ç–µ–∫–ª–∞';
    // –†–∞–∑–º–µ—Ä—ã
    if (config === 'glass' || config === 'unique' || config === 'corner' || config === 'partition') {
      if (!width) newErrors.width = '–£–∫–∞–∂–∏—Ç–µ —à–∏—Ä–∏–Ω—É';
      if (!height) newErrors.height = '–£–∫–∞–∂–∏—Ç–µ –≤—ã—Å–æ—Ç—É';
    }
    if (["straight", "straight-glass", "straight-opening"].includes(config)) {
      if (showGlassSizes) {
        if (!stationaryWidth) newErrors.stationaryWidth = '–£–∫–∞–∂–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–∞';
        if (!doorWidth) newErrors.doorWidth = '–£–∫–∞–∂–∏—Ç–µ —à–∏—Ä–∏–Ω—É –¥–≤–µ—Ä–∏';
        if (!height) newErrors.height = '–£–∫–∞–∂–∏—Ç–µ –≤—ã—Å–æ—Ç—É';
      } else {
        if (!width) newErrors.width = '–£–∫–∞–∂–∏—Ç–µ —à–∏—Ä–∏–Ω—É';
        if (!height) newErrors.height = '–£–∫–∞–∂–∏—Ç–µ –≤—ã—Å–æ—Ç—É';
      }
    }
    if (!hardwareColor) newErrors.hardwareColor = '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã';
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π —à–∞–±–ª–æ–Ω–∞
    if (selectedTemplate && config.startsWith('template-')) {
      selectedTemplate.fields?.forEach((field: TemplateField) => {
        if (field.required && !templateFields[field.name]?.trim()) {
          newErrors[`templateField_${field.name}`] = `${field.label} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`;
        }
      });
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–µ–∫–æ–ª —à–∞–±–ª–æ–Ω–∞
      if (selectedTemplate.glassConfig && Array.isArray(selectedTemplate.glassConfig)) {
        selectedTemplate.glassConfig.forEach((glassConf: GlassConfig, glassIndex: number) => {
          const glassData = templateGlasses[glassIndex];
          if (!glassData?.width?.trim()) {
            newErrors[`templateGlass_${glassIndex}_width`] = `–®–∏—Ä–∏–Ω–∞ –¥–ª—è ${glassConf.name} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞`;
          }
          if (!glassData?.height?.trim()) {
            newErrors[`templateGlass_${glassIndex}_height`] = `–í—ã—Å–æ—Ç–∞ –¥–ª—è ${glassConf.name} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞`;
          }
        });
      }
    }
    
    if (config === 'unique') {
      const glassErrs: { [idx: number]: { [field: string]: string } } = {};
      uniqueGlasses.forEach((glass, idx) => {
        const errs: { [field: string]: string } = {};
        if (!glass.name.trim()) errs.name = '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–µ–∫–ª–∞';
        if (!glass.color) errs.color = '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç–µ–∫–ª–∞';
        if (!glass.thickness) errs.thickness = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É —Å—Ç–µ–∫–ª–∞';
        // –®–∏—Ä–∏–Ω–∞
        if (!glass.width) {
          errs.width = '–£–∫–∞–∂–∏—Ç–µ —à–∏—Ä–∏–Ω—É';
        } else if (isNaN(Number(glass.width)) || Number(glass.width) < 1 || Number(glass.width) > 10000) {
          errs.width = '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10000';
        }
        // –í—ã—Å–æ—Ç–∞
        if (!glass.height) {
          errs.height = '–£–∫–∞–∂–∏—Ç–µ –≤—ã—Å–æ—Ç—É';
        } else if (isNaN(Number(glass.height)) || Number(glass.height) < 1 || Number(glass.height) > 10000) {
          errs.height = '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10000';
        }
        if (Object.keys(errs).length > 0) glassErrs[idx] = errs;
      });
      setUniqueGlassErrors(glassErrs);
      if (Object.keys(glassErrs).length > 0) return false;
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSaveProject = async () => {
    setIsSubmitted(true);
    if (!validateForm()) return;
    setSaveStatus('idle');
    setErrors({});
    const now = new Date().toISOString();
    // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É
    let finalPrice;
    if (manualPrice !== undefined) {
      finalPrice = manualPrice;
    } else if (selectedProject && selectedProject.price !== undefined) {
      finalPrice = selectedProject.price;
    } else {
      finalPrice = totalPrice ?? 0;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º statusId –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞
    const selectedStatus = propsSettings?.statusList?.find(s => s.name === status);
    const statusId = selectedStatus?._id;
    
    console.log('üéØ Status data:', { 
      status, 
      statusId, 
      selectedStatus, 
      statusList: propsSettings?.statusList?.map(s => ({ _id: s._id, name: s.name })),
      statusListLength: propsSettings?.statusList?.length || 0,
      currentProjectStatus: selectedProject?.status,
      currentProjectStatusId: selectedProject?.statusId,
      isValidObjectId: statusId ? /^[0-9a-fA-F]{24}$/.test(statusId) : 'N/A'
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    if (selectedProject && !statusId && status) {
      console.error('‚ùå Status not found in statusList:', status);
      setErrors({ global: `–°—Ç–∞—Ç—É—Å "${status}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å.` });
      setSaveStatus('error');
      return;
    }
    
    // –î–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ - –µ—Å–ª–∏ –Ω–µ—Ç statusId, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ status
    // –°–µ—Ä–≤–µ—Ä —Å–∞–º –Ω–∞–π–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π statusId
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
    const projectData = {
      name: projectName,
      customer,
      data: {
        config,
        glassColor,
        glassThickness,
        hardwareColor,
        width,
        height,
        length,
        comment,
        delivery,
        installation,
        dismantling,
        projectHardware,
        showGlassSizes,
        stationarySize,
        doorSize,
        stationaryWidth,
        doorWidth,
        exactHeight,
        uniqueGlasses: config === 'unique' ? uniqueGlasses : undefined,
        projectServices: selectedServices,
        customColor,
        selectedTemplate: selectedTemplate,
        templateFields: templateFields,
        templateGlasses: templateGlasses,
      },
      companyId: effectiveCompanyId,
      status,
      // –ü–µ—Ä–µ–¥–∞–µ–º statusId —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω –∏ –≤–∞–ª–∏–¥–µ–Ω
      ...(statusId ? { statusId } : {}),
      price: finalPrice,
      priceHistory: [
        { price: finalPrice, date: now }
      ],
    };

    console.log('üì§ Sending project data:', JSON.stringify(projectData, null, 2));

    let savedProject;
    try {
      if (selectedProject && selectedProject._id) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å
        const onlyStatusChanged = changedFields.size === 1 && changedFields.has('status') && statusId;
        
        if (onlyStatusChanged) {
          console.log('üéØ Updating only status using special endpoint');
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å–∞
          savedProject = await updateProjectStatus(selectedProject._id, statusId);
        } else {
          console.log('üîÑ Updating full project data');
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
          savedProject = await updateProject(selectedProject._id, projectData);
        }
        console.log('üìû Calling onNewProject with saved project:', savedProject?.name, savedProject?._id);
        if (typeof onNewProject === 'function') onNewProject(savedProject);
        if (savedProject) {
          setProjectName(savedProject.name || '');
          setCustomer(savedProject.customer || '');
          setConfig(savedProject.data?.config === 'straight-opening' || savedProject.data?.config === 'straight-glass' ? 'straight' : (savedProject.data?.config || ''));
          setDraftConfig(savedProject.data?.config || '');
          setGlassColor(savedProject.data?.glassColor || '');
          setGlassThickness(savedProject.data?.glassThickness || '8');
          setHardwareColor(savedProject.data?.hardwareColor || '');
          setWidth(savedProject.data?.width || '');
          setHeight(savedProject.data?.height || '');
          setLength(savedProject.data?.length || '');
          setComment(savedProject.data?.comment || '');
          setDelivery(savedProject.data?.delivery !== undefined ? savedProject.data.delivery : true);
          setInstallation(savedProject.data?.installation !== undefined ? savedProject.data.installation : true);
          setDismantling(savedProject.data?.dismantling || false);
          setProjectHardware(Array.isArray(savedProject.data?.projectHardware) ? savedProject.data.projectHardware : []);
          setStatus(savedProject.status || '–†–∞—Å—Å—á–µ—Ç');
          setShowGlassSizes(savedProject.data?.showGlassSizes || false);
          setStationarySize(savedProject.data?.stationarySize || '');
          setDoorSize(savedProject.data?.doorSize || '');
          setStationaryWidth(savedProject.data?.stationaryWidth || '');
          setDoorWidth(savedProject.data?.doorWidth || '');
          setManualPrice(undefined);
          setExactHeight(savedProject.data?.exactHeight || false);
          if (savedProject.data?.uniqueGlasses && Array.isArray(savedProject.data.uniqueGlasses)) {
            setUniqueGlasses(savedProject.data.uniqueGlasses);
          } else {
            setUniqueGlasses([
              { name: '–°—Ç–µ–∫–ª–æ 1', color: '–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π', thickness: GLASS_THICKNESS[0]?.value || '', width: '', height: '' }
            ]);
          }
          setUniqueGlassErrors({});
          setCustomColor(savedProject.data?.customColor || false);
          
          // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π —à–∞–±–ª–æ–Ω–∞
          if (savedProject.data?.selectedTemplate) {
            setSelectedTemplate(savedProject.data.selectedTemplate);
          } else {
            setSelectedTemplate(null);
          }
          
          if (savedProject.data?.templateFields && typeof savedProject.data.templateFields === 'object') {
            setTemplateFields(savedProject.data.templateFields);
          } else {
            setTemplateFields({});
          }
          
          // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
          if (Array.isArray(savedProject.data?.projectServices)) {
            setSelectedServices(savedProject.data.projectServices);
          } else {
            setSelectedServices([]);
          }
          
          // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–µ–∫–æ–ª —à–∞–±–ª–æ–Ω–∞
          if (savedProject.data?.templateGlasses && typeof savedProject.data.templateGlasses === 'object') {
            setTemplateGlasses(savedProject.data.templateGlasses);
          } else {
            setTemplateGlasses({});
          }
        }
      } else {
        // –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: POST
        console.log('‚ûï Creating new project');
        const res = await fetchWithAuth(`${BASE_API_URL}/projects`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(projectData),
        });
        if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞');
        savedProject = await res.json();
        console.log('üìû Calling onNewProject with new project:', savedProject?.name, savedProject?._id);
        if (typeof onNewProject === 'function') onNewProject(savedProject);
        resetAllFields();
        setSaveStatus('success');
      }
    } catch (e) {
      setSaveStatus('error');
      const errMsg = e instanceof Error ? e.message : '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è';
      setErrors({ global: errMsg });
      console.error('‚ùå Error saving project:', e);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
    if (savedProject) {
      setSaveStatus('success');
      setChangedFields(new Set());
    }
  };

  const handleAddGlass = () => {
    if (uniqueGlasses.length < 10) {
      setUniqueGlasses(list => [...list, {
        name: `–°—Ç–µ–∫–ª–æ ${list.length + 1}`,
        color: '–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π',
        thickness: GLASS_THICKNESS[0]?.value || '',
        width: '',
        height: ''
      }]);
    }
  };

  const handleRemoveGlass = (idx: number) => {
    if (uniqueGlasses.length > 1) setUniqueGlasses(list => list.filter((_, i) => i !== idx));
  };

  const handleGlassChange = (idx: number, field: string, value: string) => {
    setUniqueGlasses(list => list.map((g, i) => i === idx ? { ...g, [field]: value } : g));
    setUniqueGlassErrors(prev => {
      if (!prev[idx] || !prev[idx][field]) return prev;
      const newErrs = { ...prev };
      const fieldErrs = { ...newErrs[idx] };
      delete fieldErrs[field];
      if (Object.keys(fieldErrs).length === 0) {
        delete newErrs[idx];
      } else {
        newErrs[idx] = fieldErrs;
      }
      return newErrs;
    });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
  const handleHardwareColorChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newColor = e.target.value;
    setHardwareColor(newColor);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è –∑–æ–ª–æ—Ç–æ–≥–æ –∏ –∫—Ä–∞—à–µ–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
    if (newColor === 'gold' || newColor === 'painted') {
      setCustomColor(true);
    }
    
    const rest = { ...errors };
    delete rest.hardwareColor;
    setErrors(rest);
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  if (isLoadingData) {
    return (
      <div className="calculator-form-root" style={{ background: '#fff', borderRadius: 12, boxShadow: '0 1px 4px #0001', padding: 24, width: '100%', maxWidth: 480, margin: '0 auto', boxSizing: 'border-box' }}>
        <div style={{ textAlign: 'center', padding: '40px 0', color: '#666' }}>
          <div>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="calculator-form-root" style={{ padding: 24, width: '100%', maxWidth: 480, margin: '0 auto', boxSizing: 'border-box' }}>
      <h2 style={{ fontSize: 22, fontWeight: 700, marginTop: 0, marginBottom: 16, color: '#000' }}>
        {selectedProject ? `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${selectedProject.name || ''}` : '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç'}
      </h2>
      
      {/* –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ */}
      {errors.global && (
        <div style={{
          background: '#ffebee',
          border: '1px solid #f44336',
          borderRadius: 8,
          padding: 12,
          marginBottom: 16,
          color: '#d32f2f',
          fontSize: 14
        }}>
          ‚ö†Ô∏è {errors.global}
        </div>
      )}
      
      <div className="form-fields" style={{ display: 'flex', flexDirection: 'column', gap: 0, padding: 0 }}>
        {/* –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —Å—Ç–∞—Ç—É—Å –∏ —Ü–µ–Ω–∞ –ø–µ—Ä–≤—ã–º–∏ */}
        {selectedProject && (
          <>
            <div className="form-group" style={{ marginBottom: 8 }}>
              <select
                value={status}
                onChange={e => setStatus(e.target.value)}
                className={status ? 'filled' : ''}
                style={{ fontWeight: 500, fontSize: 16, background: changedFields.has('status') ? '#fffbe6' : undefined }}
              >
                <option value="" disabled hidden></option>
                {(propsSettings?.statusList || []).map(status => (
                  <option key={status._id} value={status.name}>{status.name}</option>
                ))}
              </select>
              <label>–°—Ç–∞—Ç—É—Å</label>
            </div>
            <div className="form-group" style={{ marginBottom: 8 }}>
              <input
                type="number"
                value={manualPrice === undefined ? '' : manualPrice}
                onChange={e => {
                  const val = e.target.value;
                  setManualPrice(val === '' ? undefined : Math.max(0, Math.floor(Number(val))));
                }}
                min={0}
                step={1}
                style={{
                  fontWeight: 500,
                  fontSize: 16,
                  background: selectedProject && manualPrice !== undefined && manualPrice !== selectedProject.price ? '#fffbe6' : undefined
                }}
                placeholder=""
              />
              <label>–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É</label>
            </div>
          </>
        )}
        {/* –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ */}
        <div className="form-group" style={{ width: '100%', marginLeft: 0, marginRight: 0 }}>
          <input
            type="text"
            id="project-name"
            autoComplete="off"
            placeholder=" "
            value={projectName}
            onChange={e => {
              setProjectName(e.target.value);
              const rest = { ...errors };
              delete rest.projectName;
              setErrors(rest);
            }}
            required
            style={{ width: '100%', paddingRight: 12, background: changedFields.has('name') ? '#fffbe6' : undefined }}
          />
          <label htmlFor="project-name" style={{ left: 12 }}>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ *</label>
          {errors.projectName && <div style={{ color: 'red', fontSize: 13 }}>{errors.projectName}</div>}
                  </div>
        {/* –ó–∞–∫–∞–∑—á–∏–∫ */}
        <div className="form-group" style={{ width: '100%', marginLeft: 0, marginRight: 0 }}>
          <input
            type="text"
            id="customer"
            autoComplete="off"
            placeholder=" "
            value={customer}
            onChange={e => {
              setCustomer(e.target.value);
              const rest = { ...errors };
              delete rest.customer;
              setErrors(rest);
            }}
            style={{ width: '100%', paddingRight: 12, background: changedFields.has('customer') ? '#fffbe6' : undefined }}
          />
          <label htmlFor="customer" style={{ left: 12 }}>–ó–∞–∫–∞–∑—á–∏–∫</label>
          {errors.customer && <div style={{ color: 'red', fontSize: 13 }}>{errors.customer}</div>}
        </div>
        {/* –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è */}
        <div className="form-group" style={{ width: '100%', marginLeft: 0, marginRight: 0 }}>
          <select
            id="config"
            className={config ? 'filled' : ''}
            value={config}
            onChange={handleConfigChange}
            required
            style={{ width: '100%', background: selectedProject && changedFields.has('config') ? '#fffbe6' : undefined }}
          >
            <option value="" disabled hidden></option>
            <option value="glass">–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ —Å—Ç–µ–∫–ª–æ</option>
            <option value="straight">–ü—Ä—è–º–∞—è —Ä–∞–∑–¥–≤–∏–∂–Ω–∞—è</option>
            <option value="corner">–£–≥–ª–æ–≤–∞—è —Ä–∞–∑–¥–≤–∏–∂–Ω–∞—è</option>
            <option value="unique">–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</option>
            <option value="partition">–ü–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞</option>
            {templates.filter(template => !template.isSystem).length > 0 && (
              <optgroup label="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã">
                {templates.filter(template => !template.isSystem).map(template => (
                  <option key={template._id} value={`template-${template._id}`}>
                    {template.name}
                  </option>
                ))}
              </optgroup>
            )}
          </select>
          <label htmlFor="config">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è *</label>
          {errors.config && <div style={{ color: 'red', fontSize: 13 }}>{errors.config}</div>}
        </div>
      </div>
      {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ */}
      {config === 'glass' && (
        <>
          {/* –¶–≤–µ—Ç —Å—Ç–µ–∫–ª–∞ –∏ —Ç–æ–ª—â–∏–Ω–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É */}
          <div style={{ display: 'flex', gap: 12 }}>
            <div className="form-group" style={{ flex: 1 }}>
              <select
                id="glass-color"
                className={glassColor ? 'filled' : ''}
                value={glassColor}
                onChange={e => {
                  setGlassColor(e.target.value);
                  const rest = { ...errors };
                  delete rest.glassColor;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%', background: changedFields.has('glassColor') ? '#fffbe6' : undefined }}
              >
                {glassColors.length > 0 && glassColors.map(color => (
                  <option key={color} value={color}>{color}</option>
                ))}
              </select>
              <label htmlFor="glass-color">–¶–≤–µ—Ç —Å—Ç–µ–∫–ª–∞ *</label>
              {errors.glassColor && <div style={{ color: 'red', fontSize: 13 }}>{errors.glassColor}</div>}
            </div>
            <div className="form-group" style={{ flex: 1 }}>
              <select
                id="glass-thickness"
                className={glassThickness ? 'filled' : ''}
                value={glassThickness}
                onChange={e => {
                  setGlassThickness(e.target.value);
                  const rest = { ...errors };
                  delete rest.glassThickness;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%', background: changedFields.has('glassThickness') ? '#fffbe6' : undefined }}
              >
                {GLASS_THICKNESS.map(opt => (
                  <option key={opt.value} value={opt.value}>{opt.label}</option>
                ))}
              </select>
              <label htmlFor="glass-thickness">–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–∫–ª–∞ *</label>
              {errors.glassThickness && <div style={{ color: 'red', fontSize: 13 }}>{errors.glassThickness}</div>}
            </div>
          </div>
          {/* –®–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ */}
          <div style={{ display: 'flex', gap: 12, marginBottom: 0, width: '100%' }}>
            <div className="form-group" style={{ flex: 1 }}>
              <input
                type="number"
                id="width"
                className={`glass-size-input ${width ? 'filled' : ''}`}
                placeholder=" "
                value={width}
                onChange={e => {
                  setWidth(e.target.value);
                  const rest = { ...errors };
                  delete rest.width;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%', background: changedFields.has('width') ? '#fffbe6' : undefined }}
              />
              <label htmlFor="width">–®–∏—Ä–∏–Ω–∞ (–º–º) *</label>
              {errors.width && <div style={{ color: 'red', fontSize: 13 }}>{errors.width}</div>}
            </div>
            <div className="form-group" style={{ flex: 1 }}>
              <input
                type="number"
                id="height"
                className={`glass-size-input ${height ? 'filled' : ''}`}
                placeholder=" "
                value={height}
                onChange={e => {
                  setHeight(e.target.value);
                  const rest = { ...errors };
                  delete rest.height;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%', background: changedFields.has('height') ? '#fffbe6' : undefined }}
              />
              <label htmlFor="height">–í—ã—Å–æ—Ç–∞ (–º–º) *</label>
              {errors.height && <div style={{ color: 'red', fontSize: 13 }}>{errors.height}</div>}
            </div>
          </div>
          {/* –¶–≤–µ—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –∏ —á–µ–∫–±–æ–∫—Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ */}
          <div style={{ display: 'flex', flexDirection: 'column', gap: 0 }}>
            <div style={{ display: 'flex', gap: 12, alignItems: 'center' }}>
              <div className="form-group" style={{ flex: 1, marginBottom: 0 }}>
                <select
                  id="hardware-color"
                  className={hardwareColor ? 'filled' : ''}
                  value={hardwareColor}
                  onChange={handleHardwareColorChange}
                  required
                  style={{ width: '100%', background: changedFields.has('hardwareColor') ? '#fffbe6' : undefined }}
                >
                  {HARDWARE_COLORS.map(opt => (
                    <option key={opt.value} value={opt.value}>{opt.label}</option>
                  ))}
                </select>
                <label htmlFor="hardware-color">–¶–≤–µ—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã *</label>
                {errors.hardwareColor && <div style={{ color: 'red', fontSize: 13 }}>{errors.hardwareColor}</div>}
              </div>
              {/* –ß–µ–∫–±–æ–∫—Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ */}
              <div style={{ display: 'flex', gap: 16, minWidth: 'fit-content', marginBottom: '16px' }}>
                <label style={{ display: 'flex', alignItems: 'center', gap: 6, fontSize: 13, whiteSpace: 'nowrap' }}>
                  <input
                    type="checkbox"
                    checked={customColor}
                    onChange={e => setCustomColor(e.target.checked)}
                    style={{ width: 14, height: 14 }}
                  />
                  <span>–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç</span>
                </label>
              </div>
            </div>
            <div style={{ marginTop: 0, marginBottom: 0 }}>
              <AddHardwareButton onClick={() => setShowAddHardwareDialog(true)} />
            </div>
            {projectHardware.length > 0 && (
              <div style={{ marginTop: 12, marginBottom: 8 }}>
                {projectHardware.map((hw, idx) => (
                  <div key={idx} style={{ display: 'flex', alignItems: 'center', background: '#fff', border: '1px solid #e5e7eb', borderRadius: 6, padding: '6px 10px', marginBottom: 6, height: 43 }}>
                    <span style={{ flex: 1, minWidth: 0 }}>{hw.name}</span>
                    <div style={{ display: 'flex', alignItems: 'center', gap: 8, marginLeft: 'auto' }}>
                      <QuantityControl
                        value={hw.quantity}
                        onChange={v => setProjectHardware(list => list.map((item, i) => i === idx ? { ...item, quantity: v } : item))}
                      />
                      <button
                        onClick={() => setProjectHardware(list => list.filter((_, i) => i !== idx))}
                        style={{
                          width: 32,
                          height: 32,
                          border: 'none',
                          borderRadius: '50%',
                          background: 'none',
                          color: '#e53935',
                          cursor: 'pointer',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          fontSize: 22,
                          transition: 'color 0.15s',
                          margin: 0,
                        }}
                        title="–£–¥–∞–ª–∏—Ç—å"
                        onMouseOver={e => (e.currentTarget.style.color = '#b71c1c')}
                        onMouseOut={e => (e.currentTarget.style.color = '#e53935')}
                      >
                        √ó
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
            {errors.projectHardware && <div style={{ color: 'red', fontSize: 13 }}>{errors.projectHardware}</div>}
          </div>
        </>
      )}
      {config === 'straight' && (
        <>
          {/* –¶–≤–µ—Ç —Å—Ç–µ–∫–ª–∞ –∏ —Ç–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–∫–ª–∞ –¥–ª—è straight */}
          <div style={{ display: 'flex', gap: 12 }}>
            <div className="form-group" style={{ flex: 1 }}>
              <select
                id="glass-color"
                className={glassColor ? 'filled' : ''}
                value={glassColor}
                onChange={e => {
                  setGlassColor(e.target.value);
                  const rest = { ...errors };
                  delete rest.glassColor;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%', background: changedFields.has('glassColor') ? '#fffbe6' : undefined }}
              >
                {glassColors.length > 0 && glassColors.map(color => (
                  <option key={color} value={color}>{color}</option>
                ))}
              </select>
              <label htmlFor="glass-color">–¶–≤–µ—Ç —Å—Ç–µ–∫–ª–∞ *</label>
              {errors.glassColor && <div style={{ color: 'red', fontSize: 13 }}>{errors.glassColor}</div>}
            </div>
            <div className="form-group" style={{ flex: 1 }}>
              <select
                id="glass-thickness"
                className={glassThickness ? 'filled' : ''}
                value={glassThickness}
                onChange={e => {
                  setGlassThickness(e.target.value);
                  const rest = { ...errors };
                  delete rest.glassThickness;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%', background: changedFields.has('glassThickness') ? '#fffbe6' : undefined }}
              >
                {GLASS_THICKNESS.map(opt => (
                  <option key={opt.value} value={opt.value}>{opt.label}</option>
                ))}
              </select>
              <label htmlFor="glass-thickness">–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–∫–ª–∞ *</label>
              {errors.glassThickness && <div style={{ color: 'red', fontSize: 13 }}>{errors.glassThickness}</div>}
            </div>
          </div>
          {/* –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏: –†–∞–∑–º–µ—Ä—ã –ø—Ä–æ—ë–º–∞ / –†–∞–∑–º–µ—Ä—ã —Å—Ç–µ–∫–ª–∞ (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É) */}
          <div style={{ display: 'flex', gap: 24, alignItems: 'center', margin: '8px 0 0 0' }}>
            <label style={{ fontWeight: 500, fontSize: 15, display: 'flex', alignItems: 'center', gap: 6 }}>
              <input type="radio" name="sizeType" value="opening" checked={!showGlassSizes} onChange={() => setShowGlassSizes(false)} /> –†–∞–∑–º–µ—Ä—ã –ø—Ä–æ—ë–º–∞
            </label>
            <label style={{ fontWeight: 500, fontSize: 15, display: 'flex', alignItems: 'center', gap: 6 }}>
              <input type="radio" name="sizeType" value="glass" checked={showGlassSizes} onChange={() => setShowGlassSizes(true)} /> –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–≤–µ—Ä—å
            </label>
          </div>
          {/* –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω '–†–∞–∑–º–µ—Ä—ã —Å—Ç–µ–∫–ª–∞' ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç–µ–∫–ª–∞ */}
          {showGlassSizes && (
            <div style={{ display: 'flex', gap: 12, margin: 0, width: '100%' }}>
              <div className="form-group" style={{ flex: 1 }}>
                <input
                  type="number"
                  id="stat-width"
                  placeholder=" "
                  value={stationaryWidth}
                  onChange={e => {
                    setStationaryWidth(e.target.value);
                    const rest = { ...errors };
                    delete rest.stationaryWidth;
                    setErrors(rest);
                  }}
                  required
                  style={{ width: '100%', background: changedFields.has('stationaryWidth') ? '#fffbe6' : undefined }}
                />
                <label htmlFor="stat-width" style={{ fontSize: 11 }}>–®–∏—Ä–∏–Ω–∞ –ø—Ä–æ–µ–º–∞ (–º–º)</label>
              </div>
              <div className="form-group" style={{ flex: 1 }}>
                <input
                  type="number"
                  id="door-width"
                  placeholder=" "
                  value={doorWidth}
                  onChange={e => {
                    setDoorWidth(e.target.value);
                    const rest = { ...errors };
                    delete rest.doorWidth;
                    setErrors(rest);
                  }}
                  required
                  style={{ width: '100%', background: changedFields.has('doorWidth') ? '#fffbe6' : undefined }}
                />
                <label htmlFor="door-width" style={{ fontSize: 11 }}>–®–∏—Ä–∏–Ω–∞ –¥–≤–µ—Ä–∏ (–º–º)</label>
              </div>
              <div className="form-group" style={{ flex: 1 }}>
                <input
                  type="number"
                  id="height2"
                  placeholder=" "
                  value={height}
                  onChange={e => {
                    setHeight(e.target.value);
                    const rest = { ...errors };
                    delete rest.height;
                    setErrors(rest);
                  }}
                  required
                  style={{ width: '100%', background: changedFields.has('height') ? '#fffbe6' : undefined }}
                />
                <label htmlFor="height2" style={{ fontSize: 11 }}>–í—ã—Å–æ—Ç–∞ (–º–º)</label>
              </div>
            </div>
          )}
          {/* –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω '–†–∞–∑–º–µ—Ä—ã –ø—Ä–æ—ë–º–∞' ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–æ—ë–º–∞ —Å —Ç–µ–º –∂–µ –æ—Ç—Å—Ç—É–ø–æ–º, —á—Ç–æ –∏ –¥–ª—è —Å—Ç–µ–∫–ª–∞ */}
          {!showGlassSizes && (
            <div style={{ display: 'flex', gap: 12, margin: 0, width: '100%' }}>
              <div className="form-group" style={{ flex: 1 }}>
                <input
                  type="number"
                  id="width"
                  placeholder=" "
                  value={width}
                  onChange={e => {
                    setWidth(e.target.value);
                    const rest = { ...errors };
                    delete rest.width;
                    setErrors(rest);
                  }}
                  required
                  style={{ width: '100%', background: changedFields.has('width') ? '#fffbe6' : undefined }}
                />
                <label htmlFor="width">–®–∏—Ä–∏–Ω–∞ (–º–º) *</label>
                {errors.width && <div style={{ color: 'red', fontSize: 13 }}>{errors.width}</div>}
              </div>
              <div className="form-group" style={{ flex: 1 }}>
                <input
                  type="number"
                  id="height"
                  placeholder=" "
                  value={height}
                  onChange={e => {
                    setHeight(e.target.value);
                    const rest = { ...errors };
                    delete rest.height;
                    setErrors(rest);
                  }}
                  required
                  style={{ width: '100%', background: changedFields.has('height') ? '#fffbe6' : undefined }}
                />
                <label htmlFor="height">–í—ã—Å–æ—Ç–∞ (–º–º) *</label>
                {errors.height && <div style={{ color: 'red', fontSize: 13 }}>{errors.height}</div>}
              </div>
            </div>
          )}
          {/* –¶–≤–µ—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –∏ —á–µ–∫–±–æ–∫—Å—ã –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∏ –≤—ã—Å–æ—Ç—ã */}
          <div style={{ display: 'flex', flexDirection: 'column', gap: 0 }}>
            <div style={{ display: 'flex', gap: 12, alignItems: 'center' }}>
              <div className="form-group" style={{ flex: 1, marginBottom: 0 }}>
                <select
                  id="hardware-color"
                  className={hardwareColor ? 'filled' : ''}
                  value={hardwareColor}
                  onChange={handleHardwareColorChange}
                  required
                  style={{ width: '100%', background: changedFields.has('hardwareColor') ? '#fffbe6' : undefined }}
                >
                  {HARDWARE_COLORS.map(opt => (
                    <option key={opt.value} value={opt.value}>{opt.label}</option>
                  ))}
                </select>
                <label htmlFor="hardware-color">–¶–≤–µ—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã *</label>
                {errors.hardwareColor && <div style={{ color: 'red', fontSize: 13 }}>{errors.hardwareColor}</div>}
              </div>
              {/* –ß–µ–∫–±–æ–∫—Å—ã –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∏ –≤—ã—Å–æ—Ç—ã –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ */}
              <div style={{ display: 'flex', gap: 16, minWidth: 'fit-content', marginBottom: '16px' }}>
                <label style={{ display: 'flex', alignItems: 'center', gap: 6, fontSize: 13, whiteSpace: 'nowrap' }}>
                  <input
                    type="checkbox"
                    checked={customColor}
                    onChange={e => setCustomColor(e.target.checked)}
                    style={{ width: 14, height: 14 }}
                  />
                  <span>–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç</span>
                </label>
              </div>
            </div>
            <div style={{ marginTop: 0, marginBottom: 0 }}>
              <AddHardwareButton onClick={() => setShowAddHardwareDialog(true)} />
            </div>
            {projectHardware.length > 0 && (
              <div style={{ marginTop: 12, marginBottom: 8 }}>
                {projectHardware.map((hw, idx) => (
                  <div key={idx} style={{ display: 'flex', alignItems: 'center', background: '#fff', border: '1px solid #e5e7eb', borderRadius: 6, padding: '6px 10px', marginBottom: 6, height: 43 }}>
                    <span style={{ flex: 1, minWidth: 0 }}>{hw.name}</span>
                    <div style={{ display: 'flex', alignItems: 'center', gap: 8, marginLeft: 'auto' }}>
                      <QuantityControl
                        value={hw.quantity}
                        onChange={v => setProjectHardware(list => list.map((item, i) => i === idx ? { ...item, quantity: v } : item))}
                      />
                      <button
                        onClick={() => setProjectHardware(list => list.filter((_, i) => i !== idx))}
                        style={{
                          width: 32,
                          height: 32,
                          border: 'none',
                          borderRadius: '50%',
                          background: 'none',
                          color: '#e53935',
                          cursor: 'pointer',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          fontSize: 22,
                          transition: 'color 0.15s',
                          margin: 0,
                        }}
                        title="–£–¥–∞–ª–∏—Ç—å"
                        onMouseOver={e => (e.currentTarget.style.color = '#b71c1c')}
                        onMouseOut={e => (e.currentTarget.style.color = '#e53935')}
                      >
                        √ó
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
            {errors.projectHardware && <div style={{ color: 'red', fontSize: 13 }}>{errors.projectHardware}</div>}
          </div>
        </>
      )}
      {config === 'corner' && (
        <>
          {/* –®–∏—Ä–∏–Ω–∞, –¥–ª–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞ */}
          <div style={{ display: 'flex', gap: 12, marginBottom: 0, width: '100%' }}>
            <div className="form-group" style={{ flex: 1 }}>
              <input
                type="number"
                id="width"
                placeholder=" "
                value={width}
                onChange={e => {
                  setWidth(e.target.value);
                  const rest = { ...errors };
                  delete rest.width;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%', background: changedFields.has('width') ? '#fffbe6' : undefined }}
              />
              <label htmlFor="width">–®–∏—Ä–∏–Ω–∞ (–º–º) *</label>
              {errors.width && <div style={{ color: 'red', fontSize: 13 }}>{errors.width}</div>}
            </div>
            <div className="form-group" style={{ flex: 1 }}>
              <input
                type="number"
                id="length"
                placeholder=" "
                value={length}
                onChange={e => {
                  setLength(e.target.value);
                  const rest = { ...errors };
                  delete rest.length;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%', background: changedFields.has('length') ? '#fffbe6' : undefined }}
              />
              <label htmlFor="length">–î–ª–∏–Ω–∞ (–º–º)</label>
            </div>
            <div className="form-group" style={{ flex: 1 }}>
              <input
                type="number"
                id="height"
                placeholder=" "
                value={height}
                onChange={e => {
                  setHeight(e.target.value);
                  const rest = { ...errors };
                  delete rest.height;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%', background: changedFields.has('height') ? '#fffbe6' : undefined }}
              />
              <label htmlFor="height">–í—ã—Å–æ—Ç–∞ (–º–º) *</label>
              {errors.height && <div style={{ color: 'red', fontSize: 13 }}>{errors.height}</div>}
            </div>
          </div>
          {/* –¶–≤–µ—Ç —Å—Ç–µ–∫–ª–∞ –∏ —Ç–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–∫–ª–∞ –¥–ª—è corner */}
          <div style={{ display: 'flex', gap: 12 }}>
            <div className="form-group" style={{ flex: 1 }}>
              <select
                id="glass-color"
                className={glassColor ? 'filled' : ''}
                value={glassColor}
                onChange={e => {
                  setGlassColor(e.target.value);
                  const rest = { ...errors };
                  delete rest.glassColor;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%', background: changedFields.has('glassColor') ? '#fffbe6' : undefined }}
              >
                {glassColors.length > 0 && glassColors.map(color => (
                  <option key={color} value={color}>{color}</option>
                ))}
              </select>
              <label htmlFor="glass-color">–¶–≤–µ—Ç —Å—Ç–µ–∫–ª–∞ *</label>
              {errors.glassColor && <div style={{ color: 'red', fontSize: 13 }}>{errors.glassColor}</div>}
            </div>
            <div className="form-group" style={{ flex: 1 }}>
              <select
                id="glass-thickness"
                className={glassThickness ? 'filled' : ''}
                value={glassThickness}
                onChange={e => {
                  setGlassThickness(e.target.value);
                  const rest = { ...errors };
                  delete rest.glassThickness;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%', background: changedFields.has('glassThickness') ? '#fffbe6' : undefined }}
              >
                {GLASS_THICKNESS.map(opt => (
                  <option key={opt.value} value={opt.value}>{opt.label}</option>
                ))}
              </select>
              <label htmlFor="glass-thickness">–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–∫–ª–∞ *</label>
              {errors.glassThickness && <div style={{ color: 'red', fontSize: 13 }}>{errors.glassThickness}</div>}
            </div>
          </div>
          {/* –¶–≤–µ—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –∏ —á–µ–∫–±–æ–∫—Å—ã –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∏ –≤—ã—Å–æ—Ç—ã */}
          <div style={{ display: 'flex', flexDirection: 'column', gap: 0 }}>
            <div style={{ display: 'flex', gap: 12, alignItems: 'center' }}>
              <div className="form-group" style={{ flex: 1, marginBottom: 0 }}>
                <select
                  id="hardware-color"
                  className={hardwareColor ? 'filled' : ''}
                  value={hardwareColor}
                  onChange={handleHardwareColorChange}
                  required
                  style={{ width: '100%', background: changedFields.has('hardwareColor') ? '#fffbe6' : undefined }}
                >
                  {HARDWARE_COLORS.map(opt => (
                    <option key={opt.value} value={opt.value}>{opt.label}</option>
                  ))}
                </select>
                <label htmlFor="hardware-color">–¶–≤–µ—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã *</label>
                {errors.hardwareColor && <div style={{ color: 'red', fontSize: 13 }}>{errors.hardwareColor}</div>}
              </div>
              {/* –ß–µ–∫–±–æ–∫—Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ */}
              <div style={{ display: 'flex', gap: 16, minWidth: 'fit-content', marginBottom: '16px' }}>
                <label style={{ display: 'flex', alignItems: 'center', gap: 6, fontSize: 13, whiteSpace: 'nowrap' }}>
                  <input
                    type="checkbox"
                    checked={customColor}
                    onChange={e => setCustomColor(e.target.checked)}
                    style={{ width: 14, height: 14 }}
                  />
                  <span>–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç</span>
                </label>
              </div>
            </div>
            <div style={{ marginTop: 0, marginBottom: 0 }}>
              <AddHardwareButton onClick={() => setShowAddHardwareDialog(true)} />
            </div>
            {projectHardware.length > 0 && (
              <div style={{ marginTop: 12, marginBottom: 8 }}>
                {projectHardware.map((hw, idx) => (
                  <div key={idx} style={{ display: 'flex', alignItems: 'center', background: '#fff', border: '1px solid #e5e7eb', borderRadius: 6, padding: '6px 10px', marginBottom: 6, height: 43 }}>
                    <span style={{ flex: 1, minWidth: 0 }}>{hw.name}</span>
                    <div style={{ display: 'flex', alignItems: 'center', gap: 8, marginLeft: 'auto' }}>
                      <QuantityControl
                        value={hw.quantity}
                        onChange={v => setProjectHardware(list => list.map((item, i) => i === idx ? { ...item, quantity: v } : item))}
                      />
                      <button
                        onClick={() => setProjectHardware(list => list.filter((_, i) => i !== idx))}
                        style={{
                          width: 32,
                          height: 32,
                          border: 'none',
                          borderRadius: '50%',
                          background: 'none',
                          color: '#e53935',
                          cursor: 'pointer',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          fontSize: 22,
                          transition: 'color 0.15s',
                          margin: 0,
                        }}
                        title="–£–¥–∞–ª–∏—Ç—å"
                        onMouseOver={e => (e.currentTarget.style.color = '#b71c1c')}
                        onMouseOut={e => (e.currentTarget.style.color = '#e53935')}
                      >
                        √ó
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </>
      )}
      {config === 'unique' && (
        <>
          {uniqueGlasses.map((glass, idx) => (
            <div key={idx} style={{ marginBottom: 20, position: 'relative', background: '#fff', borderRadius: 10, padding: 16, border: '1px solid #e0e0e0' }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                <div className="form-group" style={{ flex: 1, marginBottom: 0 }}>
                  <input
                    type="text"
                    id={`glass-name-${idx}`}
                    className={glass.name ? 'filled' : ''}
                    value={glass.name}
                    placeholder=" "
                    onChange={e => handleGlassChange(idx, 'name', e.target.value)}
                    style={{ width: '100%' }}
                  />
                  <label htmlFor={`glass-name-${idx}`}>–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–µ–∫–ª–∞</label>
                </div>
                {uniqueGlasses.length > 1 && (
                  <button type="button" onClick={() => handleRemoveGlass(idx)} style={{ color: '#e53935', background: 'none', border: 'none', fontSize: 22, cursor: 'pointer', marginLeft: 4, marginTop: 8 }} title="–£–¥–∞–ª–∏—Ç—å —Å—Ç–µ–∫–ª–æ">√ó</button>
                )}
              </div>
              <div style={{ display: 'flex', gap: 12, marginTop: 0 }}>
                <div className="form-group" style={{ flex: 1, marginBottom: 0 }}>
                  <select
                    id={`glass-color-${idx}`}
                    className={glass.color ? 'filled' : ''}
                    value={glass.color}
                    onChange={e => handleGlassChange(idx, 'color', e.target.value)}
                    style={{ width: '100%' }}>
                    <option value="" disabled hidden></option>
                    {glassColors.map(color => <option key={color} value={color}>{color}</option>)}
                  </select>
                  <label htmlFor={`glass-color-${idx}`}>–¶–≤–µ—Ç —Å—Ç–µ–∫–ª–∞</label>
                </div>
                <div className="form-group" style={{ flex: 1, marginBottom: 0 }}>
                  <select
                    id={`glass-thickness-${idx}`}
                    className={glass.thickness ? 'filled' : ''}
                    value={glass.thickness}
                    onChange={e => handleGlassChange(idx, 'thickness', e.target.value)}
                    style={{ width: '100%' }}>
                    <option value="" disabled hidden></option>
                    {GLASS_THICKNESS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                  </select>
                  <label htmlFor={`glass-thickness-${idx}`}>–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–∫–ª–∞</label>
                </div>
              </div>
              <div style={{ display: 'flex', gap: 12, marginTop: 0 }}>
                <div className="form-group" style={{ flex: 1, marginBottom: 0 }}>
                  <input
                    type="number"
                    id={`glass-width-${idx}`}
                    className={`glass-size-input ${glass.width ? 'filled' : ''}`}
                    value={glass.width}
                    placeholder=" "
                    onChange={e => handleGlassChange(idx, 'width', e.target.value)}
                    style={{ width: '100%' }}
                  />
                  <label htmlFor={`glass-width-${idx}`}>–®–∏—Ä–∏–Ω–∞ (–º–º)</label>
                </div>
                <div className="form-group" style={{ flex: 1, marginBottom: 0 }}>
                  <input
                    type="number"
                    id={`glass-height-${idx}`}
                    className={`glass-size-input ${glass.height ? 'filled' : ''}`}
                    value={glass.height}
                    placeholder=" "
                    onChange={e => handleGlassChange(idx, 'height', e.target.value)}
                    style={{ width: '100%' }}
                  />
                  <label htmlFor={`glass-height-${idx}`}>–í—ã—Å–æ—Ç–∞ (–º–º)</label>
                </div>
              </div>
              {isSubmitted && uniqueGlassErrors[idx]?.name && <div style={{ color: 'red', fontSize: 13 }}>{uniqueGlassErrors[idx].name}</div>}
              {isSubmitted && uniqueGlassErrors[idx]?.color && <div style={{ color: 'red', fontSize: 13 }}>{uniqueGlassErrors[idx].color}</div>}
              {isSubmitted && uniqueGlassErrors[idx]?.thickness && <div style={{ color: 'red', fontSize: 13 }}>{uniqueGlassErrors[idx].thickness}</div>}
              {isSubmitted && uniqueGlassErrors[idx]?.width && <div style={{ color: 'red', fontSize: 13 }}>{uniqueGlassErrors[idx].width}</div>}
              {isSubmitted && uniqueGlassErrors[idx]?.height && <div style={{ color: 'red', fontSize: 13 }}>{uniqueGlassErrors[idx].height}</div>}
            </div>
          ))}
          <button
            type="button"
            style={{
              background: '#fff',
              color: '#646cff',
              border: '2px solid #646cff',
              borderRadius: 8,
              padding: '10px 12px',
              fontWeight: 600,
              fontSize: 16,
              marginTop: 4,
              width: '100%',
              cursor: 'pointer',
              transition: 'background 0.15s, color 0.15s',
              display: 'block'
            }}
            onMouseOver={e => (e.currentTarget.style.background = '#f5f6ff')}
            onMouseOut={e => (e.currentTarget.style.background = '#fff')}
            onClick={handleAddGlass}
            disabled={
              uniqueGlasses.length >= 10 ||
              uniqueGlasses.some(glass =>
                !glass.name?.trim() ||
                !glass.color?.trim() ||
                !glass.thickness?.trim() ||
                !glass.width?.toString().trim() ||
                !glass.height?.toString().trim()
              )
            }
          >–î–û–ë–ê–í–ò–¢–¨ –°–¢–ï–ö–õ–û</button>
          
          {/* –¶–≤–µ—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –∏ —á–µ–∫–±–æ–∫—Å—ã –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∏ –≤—ã—Å–æ—Ç—ã */}
          <div style={{ display: 'flex', flexDirection: 'column', gap: 0, marginTop: 20 }}>
            <div style={{ display: 'flex', gap: 12, alignItems: 'center' }}>
              <div className="form-group" style={{ flex: 1, marginBottom: 0 }}>
                <select
                  id="hardware-color"
                  className={hardwareColor ? 'filled' : ''}
                  value={hardwareColor}
                  onChange={handleHardwareColorChange}
                  required
                  style={{ width: '100%', background: changedFields.has('hardwareColor') ? '#fffbe6' : undefined }}
                >
                  {HARDWARE_COLORS.map(opt => (
                    <option key={opt.value} value={opt.value}>{opt.label}</option>
                  ))}
                </select>
                <label htmlFor="hardware-color">–¶–≤–µ—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã *</label>
                {errors.hardwareColor && <div style={{ color: 'red', fontSize: 13 }}>{errors.hardwareColor}</div>}
              </div>
              {/* –ß–µ–∫–±–æ–∫—Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ */}
              <div style={{ display: 'flex', gap: 16, minWidth: 'fit-content', marginBottom: '16px' }}>
                <label style={{ display: 'flex', alignItems: 'center', gap: 6, fontSize: 13, whiteSpace: 'nowrap' }}>
                  <input
                    type="checkbox"
                    checked={customColor}
                    onChange={e => setCustomColor(e.target.checked)}
                    style={{ width: 14, height: 14 }}
                  />
                  <span>–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç</span>
                </label>
              </div>
            </div>
            <div style={{ marginTop: 0, marginBottom: 0 }}>
              <AddHardwareButton
                onClick={() => setShowAddHardwareDialog(true)}
                disabled={false}
              />
            </div>
          </div>
          {projectHardware.length > 0 && (
            <div style={{ marginTop: 12, marginBottom: 8 }}>
              {projectHardware.map((hw, idx) => (
                <div key={idx} style={{ display: 'flex', alignItems: 'center', background: '#fff', border: '1px solid #e5e7eb', borderRadius: 6, padding: '6px 10px', marginBottom: 6, height: 43 }}>
                  <span style={{ flex: 1, minWidth: 0 }}>{hw.name}</span>
                  <div style={{ display: 'flex', alignItems: 'center', gap: 8, marginLeft: 'auto' }}>
                    <QuantityControl
                      value={hw.quantity}
                      onChange={v => setProjectHardware(list => list.map((item, i) => i === idx ? { ...item, quantity: v } : item))}
                    />
                    <button
                      onClick={() => setProjectHardware(list => list.filter((_, i) => i !== idx))}
                      style={{
                        width: 32,
                        height: 32,
                        border: 'none',
                        borderRadius: '50%',
                        background: 'none',
                        color: '#e53935',
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        fontSize: 22,
                        transition: 'color 0.15s',
                        margin: 0,
                      }}
                      title="–£–¥–∞–ª–∏—Ç—å"
                      onMouseOver={e => (e.currentTarget.style.color = '#b71c1c')}
                      onMouseOut={e => (e.currentTarget.style.color = '#e53935')}
                    >
                      √ó
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </>
      )}
      {config === 'partition' && (
        <>
          {/* –¶–≤–µ—Ç —Å—Ç–µ–∫–ª–∞ –∏ —Ç–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–∫–ª–∞ */}
          <div style={{ display: 'flex', gap: 12 }}>
            <div className="form-group" style={{ flex: 1 }}>
              <select
                id="glass-color"
                className={glassColor ? 'filled' : ''}
                value={glassColor}
                onChange={e => {
                  setGlassColor(e.target.value);
                  const rest = { ...errors };
                  delete rest.glassColor;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%', background: changedFields.has('glassColor') ? '#fffbe6' : undefined }}
              >
                {glassColors.length > 0 && glassColors.map(color => (
                  <option key={color} value={color}>{color}</option>
                ))}
              </select>
              <label htmlFor="glass-color">–¶–≤–µ—Ç —Å—Ç–µ–∫–ª–∞ *</label>
              {errors.glassColor && <div style={{ color: 'red', fontSize: 13 }}>{errors.glassColor}</div>}
            </div>
            <div className="form-group" style={{ flex: 1 }}>
              <select
                id="glass-thickness"
                className={glassThickness ? 'filled' : ''}
                value={glassThickness}
                onChange={e => {
                  setGlassThickness(e.target.value);
                  const rest = { ...errors };
                  delete rest.glassThickness;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%', background: changedFields.has('glassThickness') ? '#fffbe6' : undefined }}
              >
                {GLASS_THICKNESS.map(opt => (
                  <option key={opt.value} value={opt.value}>{opt.label}</option>
                ))}
              </select>
              <label htmlFor="glass-thickness">–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–∫–ª–∞ *</label>
              {errors.glassThickness && <div style={{ color: 'red', fontSize: 13 }}>{errors.glassThickness}</div>}
            </div>
          </div>
          
          {/* –®–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ */}
          <div style={{ display: 'flex', gap: 12, marginBottom: 0, width: '100%' }}>
            <div className="form-group" style={{ flex: 1 }}>
              <input
                type="number"
                id="width"
                className={`glass-size-input ${width ? 'filled' : ''}`}
                placeholder=" "
                value={width}
                onChange={e => {
                  setWidth(e.target.value);
                  const rest = { ...errors };
                  delete rest.width;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%', background: changedFields.has('width') ? '#fffbe6' : undefined }}
              />
              <label htmlFor="width">–®–∏—Ä–∏–Ω–∞ (–º–º) *</label>
              {errors.width && <div style={{ color: 'red', fontSize: 13 }}>{errors.width}</div>}
            </div>
            <div className="form-group" style={{ flex: 1 }}>
              <input
                type="number"
                id="height"
                className={`glass-size-input ${height ? 'filled' : ''}`}
                placeholder=" "
                value={height}
                onChange={e => {
                  setHeight(e.target.value);
                  const rest = { ...errors };
                  delete rest.height;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%', background: changedFields.has('height') ? '#fffbe6' : undefined }}
              />
              <label htmlFor="height">–í—ã—Å–æ—Ç–∞ (–º–º) *</label>
              {errors.height && <div style={{ color: 'red', fontSize: 13 }}>{errors.height}</div>}
            </div>
          </div>
          
          {/* –¶–≤–µ—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –∏ —á–µ–∫–±–æ–∫—Å—ã –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∏ –≤—ã—Å–æ—Ç—ã */}
          <div style={{ display: 'flex', flexDirection: 'column', gap: 0 }}>
            <div style={{ display: 'flex', gap: 12, alignItems: 'center' }}>
              <div className="form-group" style={{ flex: 1, marginBottom: 0 }}>
                <select
                  id="hardware-color"
                  className={hardwareColor ? 'filled' : ''}
                  value={hardwareColor}
                  onChange={handleHardwareColorChange}
                  required
                  style={{ width: '100%', background: changedFields.has('hardwareColor') ? '#fffbe6' : undefined }}
                >
                  {HARDWARE_COLORS.map(opt => (
                    <option key={opt.value} value={opt.value}>{opt.label}</option>
                  ))}
                </select>
                <label htmlFor="hardware-color">–¶–≤–µ—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã *</label>
                {errors.hardwareColor && <div style={{ color: 'red', fontSize: 13 }}>{errors.hardwareColor}</div>}
              </div>
              {/* –ß–µ–∫–±–æ–∫—Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ */}
              <div style={{ display: 'flex', gap: 16, minWidth: 'fit-content', marginBottom: '16px' }}>
                <label style={{ display: 'flex', alignItems: 'center', gap: 6, fontSize: 13, whiteSpace: 'nowrap' }}>
                  <input
                    type="checkbox"
                    checked={customColor}
                    onChange={e => setCustomColor(e.target.checked)}
                    style={{ width: 14, height: 14 }}
                  />
                  <span>–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç</span>
                </label>
              </div>
            </div>
            <div style={{ marginTop: 0, marginBottom: 0 }}>
              <AddHardwareButton onClick={() => setShowAddHardwareDialog(true)} />
            </div>
            {projectHardware.length > 0 && (
              <div style={{ marginTop: 12, marginBottom: 8 }}>
                {projectHardware.map((hw, idx) => (
                  <div key={idx} style={{ display: 'flex', alignItems: 'center', background: '#fff', border: '1px solid #e5e7eb', borderRadius: 6, padding: '6px 10px', marginBottom: 6, height: 43 }}>
                    <span style={{ flex: 1, minWidth: 0 }}>{hw.name}</span>
                    <div style={{ display: 'flex', alignItems: 'center', gap: 8, marginLeft: 'auto' }}>
                      <QuantityControl
                        value={hw.quantity}
                        onChange={v => setProjectHardware(list => list.map((item, i) => i === idx ? { ...item, quantity: v } : item))}
                      />
                      <button
                        onClick={() => setProjectHardware(list => list.filter((_, i) => i !== idx))}
                        style={{
                          width: 32,
                          height: 32,
                          border: 'none',
                          borderRadius: '50%',
                          background: 'none',
                          color: '#e53935',
                          cursor: 'pointer',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          fontSize: 22,
                          transition: 'color 0.15s',
                          margin: 0,
                        }}
                        title="–£–¥–∞–ª–∏—Ç—å"
                        onMouseOver={e => (e.currentTarget.style.color = '#b71c1c')}
                        onMouseOut={e => (e.currentTarget.style.color = '#e53935')}
                      >
                        √ó
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
            {errors.projectHardware && <div style={{ color: 'red', fontSize: 13 }}>{errors.projectHardware}</div>}
          </div>
        </>
      )}
      {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —à–∞–±–ª–æ–Ω */}
      {selectedTemplate && config.startsWith('template-') && (
        <>
          {/* –¶–≤–µ—Ç —Å—Ç–µ–∫–ª–∞ –∏ —Ç–æ–ª—â–∏–Ω–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ */}
          <div style={{ display: 'flex', gap: 12 }}>
            <div className="form-group" style={{ flex: 1 }}>
              <select
                id="template-glass-color"
                className={glassColor ? 'filled' : ''}
                value={glassColor}
                onChange={e => {
                  setGlassColor(e.target.value);
                  const rest = { ...errors };
                  delete rest.glassColor;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%' }}
              >
                {glassColors.length > 0 && glassColors.map(color => (
                  <option key={color} value={color}>{color}</option>
                ))}
              </select>
              <label htmlFor="template-glass-color">–¶–≤–µ—Ç —Å—Ç–µ–∫–ª–∞ *</label>
              {errors.glassColor && <div style={{ color: 'red', fontSize: 13 }}>{errors.glassColor}</div>}
            </div>
            <div className="form-group" style={{ flex: 1 }}>
              <select
                id="template-glass-thickness"
                className={glassThickness ? 'filled' : ''}
                value={glassThickness}
                onChange={e => {
                  setGlassThickness(e.target.value);
                  const rest = { ...errors };
                  delete rest.glassThickness;
                  setErrors(rest);
                }}
                required
                style={{ width: '100%' }}
              >
                {GLASS_THICKNESS.map(opt => (
                  <option key={opt.value} value={opt.value}>{opt.label}</option>
                ))}
              </select>
              <label htmlFor="template-glass-thickness">–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–∫–ª–∞ *</label>
              {errors.glassThickness && <div style={{ color: 'red', fontSize: 13 }}>{errors.glassThickness}</div>}
            </div>
          </div>
          
          {/* –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–µ–∫–ª–∞–º */}
          {selectedTemplate.fields && selectedTemplate.glassConfig && (() => {
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—è –ø–æ —Å—Ç–µ–∫–ª–∞–º
            const glassesByIndex: { [key: number]: { width?: TemplateField; height?: TemplateField; glass?: GlassConfig } } = {};
            
            selectedTemplate.fields.forEach((field: TemplateField) => {
              const match = field.name.match(/^(width|height)_(\d+)$/);
              if (match) {
                const [, type, indexStr] = match;
                const index = parseInt(indexStr) - 1; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 0-based –∏–Ω–¥–µ–∫—Å
                if (!glassesByIndex[index]) glassesByIndex[index] = {};
                glassesByIndex[index][type as 'width' | 'height'] = field;
                glassesByIndex[index].glass = selectedTemplate.glassConfig?.[index];
              }
            });

            return Object.entries(glassesByIndex).map(([indexStr, { width, height, glass }]) => {
              const index = parseInt(indexStr);
              if (!glass) return null;
              
              return (
                <div key={index} style={{ 
                  border: '2px solid #e1e7f0', 
                  borderRadius: 8, 
                  padding: 16, 
                  marginBottom: 12,
                  background: '#fff',
                  boxShadow: '0 2px 4px rgba(0,0,0,0.05)'
                }}>
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–µ–∫–ª–∞ */}
                  <div style={{ marginBottom: 12 }}>
                    <h5 style={{ margin: '0 0 4px 0', fontSize: 16, fontWeight: 600, color: '#333' }}>
                      {glass.name}
                    </h5>
                    <div style={{ fontSize: 13, color: '#666', display: 'flex', alignItems: 'center', gap: 4 }}>
                      {glass.type === 'stationary' && (
                        <>
                          <span style={{ color: '#2196f3', fontWeight: 600 }}>üî∑</span>
                          <span>–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ —Å—Ç–µ–∫–ª–æ</span>
                        </>
                      )}
                      {glass.type === 'swing_door' && (
                        <>
                          <span style={{ color: '#ff9800', fontWeight: 600 }}>üîπ</span>
                          <span>–î–≤–µ—Ä—å —Ä–∞—Å–ø–∞—à–Ω–∞—è</span>
                          <span style={{ color: '#888', marginLeft: 8 }}>
                            (-{selectedTemplate.sizeAdjustments?.doorHeightReduction || 8}–º–º –ø–æ –≤—ã—Å–æ—Ç–µ)
                          </span>
                        </>
                      )}
                      {glass.type === 'sliding_door' && (
                        <>
                          <span style={{ color: '#4caf50', fontWeight: 600 }}>üîπ</span>
                          <span>–î–≤–µ—Ä—å —Ä–∞–∑–¥–≤–∏–∂–Ω–∞—è</span>
                          <span style={{ color: '#888', marginLeft: 8 }}>
                            (-{selectedTemplate.sizeAdjustments?.doorHeightReduction || 8}–º–º –ø–æ –≤—ã—Å–æ—Ç–µ)
                          </span>
                        </>
                      )}
                    </div>
                  </div>

                  {/* –ü–æ–ª—è —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã */}
                  <div style={{ display: 'flex', gap: 12 }}>
                    {width && (
                      <div className="form-group" style={{ flex: 1, margin: 0 }}>
                        <input
                          type="number"
                          id={`template-field-${width.name}`}
                          className={templateGlasses[index]?.width ? 'filled' : ''}
                          placeholder=" "
                          value={templateGlasses[index]?.width || ''}
                          onChange={e => {
                            setTemplateGlasses(prev => ({
                              ...prev,
                              [index]: { ...(prev[index] || { width: '', height: '' }), width: e.target.value }
                            }));
                            const rest = { ...errors };
                            delete rest[`templateField_${width.name}`];
                            setErrors(rest);
                          }}
                          required={width.required}
                          style={{ fontSize: 15, fontWeight: 500 }}
                        />
                        <label htmlFor={`template-field-${width.name}`} style={{ fontSize: 13, fontWeight: 600, color: '#555' }}>
                          {width.label}{width.required ? ' *' : ''}
                        </label>
                        {errors[`templateField_${width.name}`] && (
                          <div style={{ color: 'red', fontSize: 13 }}>
                            {errors[`templateField_${width.name}`]}
                          </div>
                        )}
                      </div>
                    )}
                    
                    {height && (
                      <div className="form-group" style={{ flex: 1, margin: 0 }}>
                        <input
                          type="number"
                          id={`template-field-${height.name}`}
                          className={templateGlasses[index]?.height ? 'filled' : ''}
                          placeholder=" "
                          value={templateGlasses[index]?.height || ''}
                          onChange={e => {
                            setTemplateGlasses(prev => ({
                              ...prev,
                              [index]: { ...(prev[index] || { width: '', height: '' }), height: e.target.value }
                            }));
                            const rest = { ...errors };
                            delete rest[`templateField_${height.name}`];
                            setErrors(rest);
                          }}
                          required={height.required}
                          style={{ fontSize: 15, fontWeight: 500 }}
                        />
                        <label htmlFor={`template-field-${height.name}`} style={{ fontSize: 13, fontWeight: 600, color: '#555' }}>
                          {height.label}{height.required ? ' *' : ''}
                        </label>
                        {errors[`templateField_${height.name}`] && (
                          <div style={{ color: 'red', fontSize: 13 }}>
                            {errors[`templateField_${height.name}`]}
                          </div>
                        )}
                      </div>
                    )}
                  </div>

                  {/* –û–ø—Ü–∏—è –ø–æ—Ä–æ–∂–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å–ø–∞—à–Ω–æ–π –¥–≤–µ—Ä–∏ */}
                  {glass.type === 'swing_door' && (
                    <div style={{ marginTop: 8 }}>
                      <div style={{ fontSize: 12, marginBottom: 4, color: '#333' }}>–ü–æ—Ä–æ–∂–µ–∫:</div>
                      <div style={{ display: 'flex', gap: 24, alignItems: 'center' }}>
                        <label style={{ display: 'flex', alignItems: 'center', gap: 6, fontSize: 13, whiteSpace: 'nowrap' }}>
                          <input
                            type="radio"
                            name={`threshold-${index}`}
                            checked={!(templateGlasses[index]?.hasThreshold || false)}
                            onChange={() => {
                              setTemplateGlasses(prev => ({
                                ...prev,
                                [index]: { ...(prev[index] || { width: '', height: '' }), hasThreshold: false }
                              }));
                            }}
                          />
                          –ë–µ–∑ –ø–æ—Ä–æ–∂–∫–∞
                        </label>
                        <label style={{ display: 'flex', alignItems: 'center', gap: 6, fontSize: 13, whiteSpace: 'nowrap' }}>
                          <input
                            type="radio"
                            name={`threshold-${index}`}
                            checked={templateGlasses[index]?.hasThreshold || false}
                            onChange={() => {
                              setTemplateGlasses(prev => ({
                                ...prev,
                                [index]: { ...(prev[index] || { width: '', height: '' }), hasThreshold: true }
                              }));
                            }}
                          />
                          –° –ø–æ—Ä–æ–∂–∫–æ–º
                        </label>
                      </div>
                    </div>
                  )}

                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞—Ö */}
                  {glass.type === 'swing_door' && (
                    <div style={{ 
                      marginTop: 8, 
                      fontSize: 11, 
                      color: '#666', 
                      fontStyle: 'italic',
                      padding: '4px 8px',
                      background: '#f8f9fa',
                      borderRadius: 4,
                      border: '1px solid #e5e7eb'
                    }}>
                      –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: –≤—ã—Å–æ—Ç–∞ —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ {selectedTemplate.sizeAdjustments?.doorHeightReduction || 8}–º–º
                      {templateGlasses[index]?.hasThreshold && 
                        ` + ${selectedTemplate.sizeAdjustments?.thresholdReduction || 15}–º–º –¥–ª—è –ø–æ—Ä–æ–∂–∫–∞`
                      }
                    </div>
                  )}
                </div>
              );
            }).filter(Boolean);
          })()}





          {/* –¶–≤–µ—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –∏ —á–µ–∫–±–æ–∫—Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ */}
          <div style={{ display: 'flex', flexDirection: 'column', gap: 0 }}>
            <div style={{ display: 'flex', gap: 12, alignItems: 'center' }}>
              <div className="form-group" style={{ flex: 1, marginBottom: 0 }}>
                <select
                  id="template-hardware-color"
                  className={hardwareColor ? 'filled' : ''}
                  value={hardwareColor}
                  onChange={handleHardwareColorChange}
                  required
                  style={{ width: '100%' }}
                >
                  {HARDWARE_COLORS.map(opt => (
                    <option key={opt.value} value={opt.value}>{opt.label}</option>
                  ))}
                </select>
                <label htmlFor="template-hardware-color">–¶–≤–µ—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã *</label>
                {errors.hardwareColor && <div style={{ color: 'red', fontSize: 13 }}>{errors.hardwareColor}</div>}
              </div>
              {/* –ß–µ–∫–±–æ–∫—Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ */}
              <div style={{ display: 'flex', gap: 16, minWidth: 'fit-content', marginBottom: '16px' }}>
                {/* –ß–µ–∫–±–æ–∫—Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ —à–∞–±–ª–æ–Ω–µ */}
                {selectedTemplate.customColorOption && (
                  <label style={{ display: 'flex', alignItems: 'center', gap: 6, fontSize: 13, whiteSpace: 'nowrap' }}>
                    <input
                      type="checkbox"
                      checked={customColor}
                      onChange={e => setCustomColor(e.target.checked)}
                      style={{ width: 14, height: 14 }}
                    />
                    <span>–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç</span>
                  </label>
                )}

              </div>
            </div>
            <div style={{ marginTop: 0, marginBottom: 0 }}>
              <AddHardwareButton onClick={() => setShowAddHardwareDialog(true)} />
            </div>
            {projectHardware.length > 0 && (
              <div style={{ marginTop: 12, marginBottom: 8 }}>
                {projectHardware.map((hw, idx) => (
                  <div key={idx} style={{ display: 'flex', alignItems: 'center', background: '#fff', border: '1px solid #e5e7eb', borderRadius: 6, padding: '6px 10px', marginBottom: 6, height: 43 }}>
                    <span style={{ flex: 1, minWidth: 0 }}>{hw.name}</span>
                    <div style={{ display: 'flex', alignItems: 'center', gap: 8, marginLeft: 'auto' }}>
                      <QuantityControl
                        value={hw.quantity}
                        onChange={v => setProjectHardware(list => list.map((item, i) => i === idx ? { ...item, quantity: v } : item))}
                      />
                      <button
                        onClick={() => setProjectHardware(list => list.filter((_, i) => i !== idx))}
                        style={{
                          width: 32,
                          height: 32,
                          border: 'none',
                          borderRadius: '50%',
                          background: 'none',
                          color: '#e53935',
                          cursor: 'pointer',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          fontSize: 22,
                          transition: 'color 0.15s',
                          margin: 0,
                        }}
                        title="–£–¥–∞–ª–∏—Ç—å"
                        onMouseOver={e => (e.currentTarget.style.color = '#b71c1c')}
                        onMouseOut={e => (e.currentTarget.style.color = '#e53935')}
                      >
                        √ó
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </>
      )}
      {config && (
        <button
          type="button"
          style={{
            padding: '10px 12px',
            borderRadius: 8,
            background: '#fff',
            color: '#646cff',
            border: '2px solid #646cff',
            fontWeight: 600,
            fontSize: 16,
            cursor: showAddServiceDialog ? 'not-allowed' : 'pointer',
            marginTop: 12,
            width: '100%',
            opacity: showAddServiceDialog ? 0.5 : 1,
          }}
          onClick={() => setShowAddServiceDialog(true)}
          disabled={showAddServiceDialog}
        >
          –î–û–ë–ê–í–ò–¢–¨ –£–°–õ–£–ì–£
        </button>
      )}
      {showAddServiceDialog && (
        <AddServiceDialog
          serviceList={serviceList}
          projectServices={selectedServices}
          onSave={selected => { setSelectedServices(selected); setShowAddServiceDialog(false); }}
          onClose={() => setShowAddServiceDialog(false)}
        />
      )}
      {selectedServices.length > 0 && (
        <div style={{ marginTop: 12, marginBottom: 8 }}>
          {selectedServices.map((service, idx) => (
            <div key={idx} style={{ display: 'flex', alignItems: 'center', background: '#fff', border: '1px solid #e5e7eb', borderRadius: 6, padding: '6px 10px', marginBottom: 6, height: 43 }}>
              <span style={{ flex: 1, minWidth: 0 }}>{service.name}</span>
              <button
                onClick={() => setSelectedServices(list => list.filter((_, i) => i !== idx))}
                style={{
                  width: 32,
                  height: 32,
                  border: 'none',
                  borderRadius: '50%',
                  background: 'none',
                  color: '#e53935',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: 22,
                  transition: 'color 0.15s',
                  margin: 0,
                }}
                title="–£–¥–∞–ª–∏—Ç—å"
                onMouseOver={e => (e.currentTarget.style.color = '#b71c1c')}
                onMouseOut={e => (e.currentTarget.style.color = '#e53935')}
              >
                √ó
              </button>
            </div>
          ))}
        </div>
      )}
      {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
      <div className="form-group" style={{ width: '100%', marginLeft: 0, marginRight: 0 }}>
        <textarea
          id="comment"
          placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
          value={comment}
          onChange={e => setComment(e.target.value)}
          style={{ width: '105%', minHeight: 60, resize: 'vertical', borderRadius: 8, border: '1px solid #ccc', padding: 8, fontSize: 15, marginTop: 8 }}
        />
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
      <div className="form-actions" style={{ margin: '12px 0 0 0' }}>
        <button
          style={{
            width: '100%',
            padding: '10px 0',
            borderRadius: 8,
            background: !selectedProject || changedFields.size > 0 ? '#646cff' : '#ccc',
            color: '#fff',
            border: 'none',
            fontWeight: 600,
            fontSize: 16,
            cursor: !selectedProject || changedFields.size > 0 ? 'pointer' : 'not-allowed',
            opacity: !selectedProject || changedFields.size > 0 ? 1 : 0.7,
          }}
          disabled={!!selectedProject && changedFields.size === 0}
          onClick={handleSaveProject}
        >
          –°–û–•–†–ê–ù–ò–¢–¨
        </button>
      </div>
      {/* –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ */}
      {selectedProject && Array.isArray(selectedProject.statusHistory) && selectedProject.statusHistory.length > 0 && (() => {
        const statusHistory = selectedProject.statusHistory || [];
        return (
          <div style={{ marginTop: 18, background: '#f8f8f8', borderRadius: 8, padding: 12, border: '1px solid #e0e0e0' }}>
            <div style={{ fontWeight: 600, fontSize: 15, marginBottom: 6 }}>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:</div>
            {statusHistory.map((sh, idx) => (
              <div key={idx} style={{ color: idx === statusHistory.length - 1 ? '#1976d2' : '#888', fontSize: 15, marginBottom: 2, fontWeight: idx === statusHistory.length - 1 ? 600 : 400 }}>
                {sh.status} <span style={{ fontSize: 13, marginLeft: 8 }}>{new Date(sh.date).toLocaleString()}</span>
                {idx === 0 && <span style={{ color: '#aaa', fontSize: 13, marginLeft: 8 }}>(–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π)</span>}
                {idx === statusHistory.length - 1 && <span style={{ color: '#1976d2', fontSize: 13, marginLeft: 8 }}>(—Ç–µ–∫—É—â–∏–π)</span>}
              </div>
            ))}
          </div>
        );
      })()}
      {showAddHardwareDialog && (
        <AddHardwareDialog
          hardwareList={hardwareList}
          onSave={selected => {
            setProjectHardware(list => [...list, ...selected]);
            setShowAddHardwareDialog(false);
          }}
          onClose={() => setShowAddHardwareDialog(false)}
          projectHardware={projectHardware}
        />
      )}
      <style>{`
        .calculator-form-root {
          width: 100%;
          max-width: 480px;
          margin: 0 auto;
          box-sizing: border-box;
        }
        .calculator-form-root .form-group,
        .calculator-form-root input,
        .calculator-form-root select,
        .calculator-form-root textarea {
          width: 100%;
          max-width: 100%;
          box-sizing: border-box;
        }
        @media (max-width: 768px) {
          .calculator-form-root {
            width: 100vw !important;
            max-width: 100vw !important;
            margin: 0 !important;
            position: relative !important;
            padding: 16px !important;
            min-height: auto !important;
            height: auto !important;
            box-sizing: border-box !important;
            left: 0 !important;
            right: 0 !important;
          }
          .form-actions {
            margin-top: 16px !important;
            margin-bottom: 0 !important;
          }
          .form-group {
            max-width: none !important;
          }
        }
        .form-group { position: relative; margin: 12px 0; width: 100%; max-width: 480px; }
        @media (max-width: 768px) {
          .form-group { max-width: none !important; }
        }
        .form-group input,
        .form-group select,
        .form-group textarea {
          width: 100%;
          box-sizing: border-box;
          padding: 16px 12px 8px 12px;
          font-size: 16px;
          border: 1px solid #ccc;
          border-radius: 8px;
          background: #fff;
          transition: border-color 0.2s;
          color: #222 !important;
        }
        .form-group select {
          appearance: none;
          -webkit-appearance: none;
          -moz-appearance: none;
          padding-right: 32px;
          background: url('data:image/svg+xml;utf8,<svg fill="#646cff" height="20" viewBox="0 0 20 20" width="20" xmlns="http://www.w3.org/2000/svg"><path d="M7.293 7.293a1 1 0 011.414 0L10 8.586l1.293-1.293a1 1 0 111.414 1.414l-2 2a1 1 0 01-1.414 0l-2-2a1 1 0 010-1.414z"/></svg>') no-repeat right 12px center, #fff;
        }
        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
          border-color: #646cff;
          outline: none;
        }
        .form-group label {
          position: absolute;
          top: 50%;
          left: 12px;
          color: #888 !important;
          background: #fff;
          padding: 0 4px;
          font-size: 15px;
          pointer-events: none;
          transition: 0.2s ease all;
          transform: translateY(-50%);
        }
        .form-group input:focus + label,
        .form-group input:not(:placeholder-shown) + label,
        .form-group textarea.filled + label,
        .form-group textarea:focus + label {
          top: -10px;
          left: 8px;
          font-size: 12px;
          color: #888;
          transform: none;
        }
        .form-group select.filled + label,
        .form-group select:focus + label {
          top: -10px;
          left: 8px;
          font-size: 12px;
          color: #888;
          transform: none;
        }
        /* –°–∫—Ä—ã—Ç—å —Å—Ç—Ä–µ–ª–∫–∏ —É —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç–µ–∫–ª–∞ */
        .glass-size-input::-webkit-outer-spin-button,
        .glass-size-input::-webkit-inner-spin-button {
          -webkit-appearance: none;
          margin: 0;
        }
        .glass-size-input {
          -moz-appearance: textfield;
        }
        .calculator-form-root h2 {
          margin: 0 0 12px 0 !important;
        }
        .form-actions {
          margin-top: 12px !important;
        }
      `}</style>
      {saveStatus === 'success' && <div style={{ color: 'green', marginBottom: 8 }}>–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!</div>}
      {saveStatus === 'error' && <div style={{ color: 'red', marginBottom: 8 }}>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞</div>}
      {errors.company && <div style={{ color: 'red', fontSize: 13, marginTop: 8 }}>{errors.company}</div>}
    </div>
  );
};

export default CalculatorForm; 
