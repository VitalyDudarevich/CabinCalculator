import React, { useState, useEffect } from 'react';
import {
  DndContext,
  DragOverlay,
  closestCenter,
  PointerSensor,
  useSensor,
  useSensors,
  useDroppable,
  type DragEndEvent,
  type DragOverEvent,
  type DragStartEvent,
} from '@dnd-kit/core';
import {
  SortableContext,
  useSortable,
  verticalListSortingStrategy,
} from '@dnd-kit/sortable';
import {
  CSS,
} from '@dnd-kit/utilities';
import { getStatuses } from '../utils/statusApi';
import { getProjects, updateProjectStatus, type ProjectApiResponse } from '../utils/api';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface Status {
  _id: string;
  name: string;
  color: string;
  order: number;
  companyId: string;
  isDefault: boolean;
  isActive: boolean;
}

interface Project {
  _id: string;
  name: string;
  customer?: string;
  status?: string;
  statusId?: {
    _id: string;
    name: string;
    color: string;
    order: number;
  };
  price?: number;
  priceHistory?: { price: number; date: string }[];
  statusHistory?: { status: string; statusId?: string; date: string }[];
  createdAt: string;
  updatedAt: string;
  data?: Record<string, unknown>;
}

interface KanbanBoardProps {
  companyId: string;
  onProjectEdit?: (project: Project) => void;
  onProjectDelete?: (project: Project) => void;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ª–µ–π–±–ª—ã –∫–∞–∫ –≤ ProjectHistory
const configLabels: Record<string, string> = {
  glass: '–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ —Å—Ç–µ–∫–ª–æ',
  straight: '–ü—Ä—è–º–∞—è —Ä–∞–∑–¥–≤–∏–∂–Ω–∞—è',
  'straight-opening': '–ü—Ä—è–º–∞—è —Ä–∞–∑–¥–≤–∏–∂–Ω–∞—è',
  'straight-glass': '–ü—Ä—è–º–∞—è —Ä–∞–∑–¥–≤–∏–∂–Ω–∞—è',
  corner: '–£–≥–ª–æ–≤–∞—è —Ä–∞–∑–¥–≤–∏–∂–Ω–∞—è',
  unique: '–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
  partition: '–ü–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–µ–π–±–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const getConfigLabel = (config: string): string => {
  return configLabels[config] || config;
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
interface SortableProjectProps {
  project: Project;
  isOverlay?: boolean;
  onEdit?: (project: Project) => void;
  onProjectMove?: (projectId: string, targetStatusId: string, statusName: string) => Promise<void>;
}

const SortableProject: React.FC<SortableProjectProps> = ({ project, isOverlay = false, onEdit, onProjectMove }) => {
  console.log('üéØ SortableProject RENDERING for:', project.name, 'ID:', project._id);
  
  const [isHovered, setIsHovered] = React.useState(false);
  
  console.log('üìû Calling useSortable with ID:', project._id);
  const sortableResult = useSortable({
    id: project._id,
  });
  
  console.log('üì¶ useSortable returned:', {
    projectName: project.name,
    projectId: project._id,
    hasListeners: !!sortableResult.listeners,
    hasAttributes: !!sortableResult.attributes,
    hasSetNodeRef: !!sortableResult.setNodeRef,
    isDragging: sortableResult.isDragging,
    listeners: sortableResult.listeners,
    attributes: sortableResult.attributes
  });

  const {
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = sortableResult;

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.3 : 1, // –î–µ–ª–∞–µ–º –ø–æ—á—Ç–∏ –Ω–µ–≤–∏–¥–∏–º—ã–º –≤–æ –≤—Ä–µ–º—è –¥—Ä–∞–≥–∞
    zIndex: isDragging ? -1 : 1, // –£–±–∏—Ä–∞–µ–º –Ω–∞ –∑–∞–¥–Ω–∏–π –ø–ª–∞–Ω
  };

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è drag and drop
  const [isDraggingManual, setIsDraggingManual] = React.useState(false);


  
  const handleManualMouseDown = (e: React.MouseEvent) => {
    console.log('üéØ MOUSEDOWN TRIGGERED! Project:', project.name);
    e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
    
    const startX = e.clientX;
    const startY = e.clientY;
    let moved = false;
    let dragElement: HTMLElement | null = null;
    
    const handleMouseMove = (event: MouseEvent) => {
      const deltaX = Math.abs(event.clientX - startX);
      const deltaY = Math.abs(event.clientY - startY);
      
      if (!moved && (deltaX > 5 || deltaY > 5)) {
        moved = true;
        setIsDraggingManual(true);
        console.log('üî• Manual drag started for:', project.name);
        
        // –°–æ–∑–¥–∞–µ–º –ª–µ—Ç–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        dragElement = document.createElement('div');
        dragElement.innerHTML = `
          <div style="
            background: #f0f8ff;
            border: 2px solid #2196f3;
            border-radius: 8px;
            padding: 12px;
            box-shadow: 0 8px 24px rgba(33, 150, 243, 0.4);
            opacity: 0.9;
            pointer-events: none;
            z-index: 9999;
            position: fixed;
            transform: rotate(3deg);
            min-width: 200px;
            max-width: 300px;
          ">
            <div style="font-weight: 600; font-size: 16px; color: #000; margin-bottom: 4px;">
              ${project.name}
            </div>
            <div style="color: #666; font-size: 12px;">
              –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ...
            </div>
          </div>
        `;
        dragElement.style.position = 'fixed';
        dragElement.style.left = event.clientX + 10 + 'px';
        dragElement.style.top = event.clientY + 10 + 'px';
        dragElement.style.zIndex = '9999';
        dragElement.style.pointerEvents = 'none';
        document.body.appendChild(dragElement);
      }
      
      if (moved && dragElement) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ª–µ—Ç–∞—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        dragElement.style.left = event.clientX + 10 + 'px';
        dragElement.style.top = event.clientY + 10 + 'px';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        const elementUnderMouse = document.elementFromPoint(event.clientX, event.clientY);
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        document.querySelectorAll('.kanban-column').forEach(col => {
          const element = col as HTMLElement;
          element.style.background = '';
          element.style.border = '';
          element.style.transform = '';
        });
        
        // –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        let dropZone = elementUnderMouse;
        let attempts = 0;
        
        while (dropZone && attempts < 10) {
          if (dropZone.classList?.contains('kanban-column')) {
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
            const columnElement = dropZone as HTMLElement;
            columnElement.style.background = '#e8f5e8 !important';
            columnElement.style.border = '3px dashed #4caf50 !important';
            columnElement.style.transform = 'scale(1.02)';
            columnElement.style.transition = 'all 0.2s ease';
            break;
          }
          dropZone = dropZone.parentElement;
          attempts++;
        }
      }
    };
    
    const handleMouseUp = async (event: MouseEvent) => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      
      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
      document.querySelectorAll('.kanban-column').forEach(col => {
        const element = col as HTMLElement;
        element.style.background = '';
        element.style.border = '';
        element.style.transform = '';
        element.style.transition = '';
      });
      
      if (dragElement) {
        document.body.removeChild(dragElement);
      }
      
      setIsDraggingManual(false);
      
      if (moved) {
        console.log('üéØ Manual drag ended for:', project.name);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è drop
        const elementUnderMouse = document.elementFromPoint(event.clientX, event.clientY);
        let dropZone = elementUnderMouse;
        let attempts = 0;
        
        while (dropZone && attempts < 10) {
          const statusId = dropZone.getAttribute('data-status-id');
          const statusName = dropZone.getAttribute('data-status-name');
          
          if (statusId && statusName) {
            console.log('‚úÖ Dropped on column:', statusName, 'ID:', statusId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥—Ä—É–≥–∞—è –∫–æ–ª–æ–Ω–∫–∞
            if (project.statusId?._id !== statusId) {
              console.log('üöÄ Moving project to new status...');
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
              const loadingMessage = `‚è≥ –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø—Ä–æ–µ–∫—Ç "${project.name}"...`;
              const notification = document.createElement('div');
              notification.innerHTML = loadingMessage;
              notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #2196f3;
                color: white;
                padding: 12px 20px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                z-index: 10000;
                font-weight: 600;
              `;
              document.body.appendChild(notification);
              
              // –†–µ–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
              if (onProjectMove) {
                try {
                  await onProjectMove(project._id, statusId, statusName);
                  
                  // –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                  notification.innerHTML = `‚úÖ –ü—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ "${statusName}"`;
                  notification.style.background = '#4caf50';
                  
                  setTimeout(() => {
                    if (notification.parentNode) {
                      document.body.removeChild(notification);
                    }
                  }, 3000);
                  
                } catch (err) {
                  // –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                  notification.innerHTML = `‚ùå –û—à–∏–±–∫–∞: ${err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç'}`;
                  notification.style.background = '#f44336';
                  
                  setTimeout(() => {
                    if (notification.parentNode) {
                      document.body.removeChild(notification);
                    }
                  }, 5000);
                }
              }
              
            } else {
              console.log('‚ö†Ô∏è Same column, no move needed');
            }
            return;
          }
          
          dropZone = dropZone.parentElement;
          attempts++;
        }
        
        console.log('‚ùå No valid drop zone found');
      } else {
        console.log('üñ±Ô∏è Just a click on:', project.name);
        if (onEdit) onEdit(project);
      }
    };
    
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
  };

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ @dnd-kit
  const testHandlers = {
    onMouseDown: handleManualMouseDown
  };

  return (
    <div
      ref={setNodeRef}
      {...testHandlers}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      style={{
        ...style,
        cursor: isDraggingManual ? 'grabbing' : isHovered ? 'grab' : 'pointer', // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ
        transition: (isDragging || isDraggingManual) ? 'none' : 'all 0.2s ease',
        touchAction: 'none',
        userSelect: 'none',
        WebkitUserSelect: 'none',
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é hover –∏ drag
        backgroundColor: isDraggingManual ? '#e3f2fd' : isHovered ? '#f0f8ff' : 'transparent',
        // –î–æ–±–∞–≤–ª—è–µ–º border –ø—Ä–∏ hover –∏–ª–∏ drag
        border: (isHovered || isDraggingManual) ? '3px solid #2196f3' : '3px solid transparent', // –ë–æ–ª–µ–µ —è—Ä–∫–∞—è —Ä–∞–º–∫–∞
        borderRadius: '8px',
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ pointer events —Ä–∞–±–æ—Ç–∞—é—Ç
        pointerEvents: 'auto',
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –ø—Ä–∏ hover –∏–ª–∏ drag
        boxShadow: isDraggingManual ? '0 8px 24px rgba(33, 150, 243, 0.4)' : isHovered ? '0 4px 12px rgba(33, 150, 243, 0.3)' : 'none',
        // –î–µ–ª–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º –≤–æ –≤—Ä–µ–º—è drag
        opacity: isDraggingManual ? 0.7 : 1,
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É —á—Ç–æ–±—ã –±—ã–ª–æ –ø—Ä–æ—â–µ –∫–ª–∏–∫–∞—Ç—å
        minHeight: '60px',
      }}
    >
      <ProjectCard 
        project={project} 
        isOverlay={isOverlay} 
        isHovered={isHovered}
        isDragging={isDragging}
      />
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
interface ProjectCardProps {
  project: Project;
  isOverlay?: boolean;
  isHovered?: boolean;
  isDragging?: boolean;
}

const ProjectCard: React.FC<ProjectCardProps> = ({ 
  project, 
  isOverlay = false, 
  isHovered = false, 
  isDragging = false 
}) => {
  return (
    <div
      style={{
        marginBottom: 8,
        background: isOverlay 
          ? '#f0f8ff' 
          : isHovered 
            ? '#f0f8ff' 
            : '#fafbff',
        borderRadius: 8,
        padding: 16,
        border: isOverlay || isHovered 
          ? '1px solid #2196f3' 
          : '1px solid #f0f0f0',
        boxShadow: isOverlay 
          ? '0 8px 24px rgba(0,0,0,0.3)' 
          : isHovered 
            ? '0 4px 12px rgba(0,0,0,0.15)' 
            : '0 1px 2px rgba(0,0,0,0.02)',
        userSelect: 'none',
        transition: isOverlay || isDragging ? 'none' : 'all 0.2s ease',
      }}
    >
      {/* –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ */}
      <div style={{ 
        fontWeight: 600, 
        fontSize: 18, 
        marginBottom: 8, 
        wordBreak: 'break-word', 
        color: '#000'
      }}>
        {project.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
        {project.data && 
         typeof project.data === 'object' && 
         'config' in project.data && 
         typeof project.data.config === 'string' && (
          <span style={{ 
            color: '#666', 
            fontWeight: 400, 
            fontSize: 16 
          }}>
            {' '}({getConfigLabel(project.data.config)})
          </span>
        )}
      </div>
      
      {/* –ó–∞–∫–∞–∑—á–∏–∫ */}
      {project.customer && (
        <div style={{ 
          color: '#666', 
          fontSize: 14, 
          marginBottom: 8, 
          fontStyle: 'italic'
        }}>
          <strong>–ó–∞–∫–∞–∑—á–∏–∫:</strong> {project.customer}
        </div>
      )}
      
      {/* –°—É–º–º–∞ */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        marginBottom: 4
      }}>
        <span style={{ 
          color: '#222', 
          fontWeight: 700, 
          fontSize: 16 
        }}>
          –°—É–º–º–∞:
        </span>
        <span style={{ 
          color: '#222', 
          fontWeight: 700, 
          fontSize: 16 
        }}>
          {typeof project.price === 'number' 
            ? project.price.toLocaleString('ru-RU') 
            : 0} ‚Çæ
        </span>
      </div>
      
      {/* –î–∞—Ç–∞ */}
      <div style={{ 
        color: '#888', 
        fontSize: 13
      }}>
        {new Date(project.createdAt).toLocaleString('ru-RU')}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥—Ä–æ–ø–∑–æ–Ω—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
interface DroppableStatusProps {
  status: Status;
  projects: Project[];
  onProjectEdit?: (project: Project) => void;
  onProjectMove?: (projectId: string, targetStatusId: string, statusName: string) => Promise<void>;
  isDesktop?: boolean;
}

const DroppableStatus: React.FC<DroppableStatusProps> = ({ 
  status, 
  projects, 
  onProjectEdit,
  onProjectMove,
  isDesktop = true 
}) => {
  const projectIds = projects.map(p => p._id);
  const [isHovered, setIsHovered] = React.useState(false);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º useDroppable –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–æ–ø–∑–æ–Ω—ã
  const { isOver, setNodeRef } = useDroppable({
    id: status._id,
  });

  const containerStyle = isDesktop ? {
    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
    flex: `0 0 ${window.innerWidth >= 1400 ? '320px' : window.innerWidth >= 1200 ? '280px' : '250px'}`,
    width: window.innerWidth >= 1400 ? '320px' : window.innerWidth >= 1200 ? '280px' : '250px',
    minWidth: window.innerWidth >= 1400 ? '320px' : window.innerWidth >= 1200 ? '280px' : '250px',
    background: '#f8f9fa',
    borderRadius: 12,
    padding: 8,
    height: '100%',
    minHeight: '200px',
    maxHeight: 'none',
    display: 'flex',
    flexDirection: 'column' as const,
    overflow: 'hidden',
    boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
  } : {
    background: '#f8f9fa',
    borderRadius: 12,
    padding: 12,
    minHeight: 'calc(100vh - 320px)',
    maxHeight: 'calc(100vh - 320px)',
    overflowY: 'auto' as const
  };

  console.log('üèóÔ∏è Creating DroppableStatus for:', status.name, 'with ID:', status._id);
  
  return (
    <div 
      ref={setNodeRef}
      className="kanban-column"
      data-status-id={status._id}
      data-status-name={status.name}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      style={{
        ...containerStyle,
        background: isOver ? '#e3f2fd' : isHovered ? '#f8f9fa' : containerStyle.background,
        border: isOver ? '2px dashed #2196f3' : '2px dashed transparent',
        transition: 'all 0.2s ease',
      }}
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ */}
      <div style={{ 
        display: 'flex', 
        alignItems: 'center', 
        marginBottom: 16,
        paddingBottom: 12,
        borderBottom: '2px solid #e0e0e0',
        flexShrink: 0
      }}>
        <div 
          style={{ 
            width: 12, 
            height: 12, 
            borderRadius: 6, 
            background: status.color,
            marginRight: 8 
          }} 
        />
        <h3 style={{ 
          fontSize: 16, 
          fontWeight: 600, 
          margin: 0,
          color: '#333'
        }}>
          {status.name}
        </h3>
        <span style={{ 
          marginLeft: 'auto',
          background: '#e0e0e0',
          borderRadius: 12,
          padding: '4px 8px',
          fontSize: 12,
          color: '#666'
        }}>
          {projects.length}
        </span>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ */}
      <div style={{
        flex: 1,
        overflowY: isDesktop ? 'auto' : 'visible',
        minHeight: 0,
        padding: 4,
      }}>
        <SortableContext items={projectIds} strategy={verticalListSortingStrategy}>
          {(() => {
            console.log('üîç SortableContext rendering:', {
              statusName: status.name,
              projectIds,
              projectCount: projects.length
            });
            return projects.map((project) => (
              <SortableProject
                key={project._id}
                project={project}
                onEdit={onProjectEdit}
                onProjectMove={onProjectMove}
              />
            ));
          })()}
        </SortableContext>
      </div>
    </div>
  );
};

const KanbanBoard: React.FC<KanbanBoardProps> = ({ 
  companyId, 
  onProjectEdit,
  onProjectDelete: _onProjectDelete // eslint-disable-line @typescript-eslint/no-unused-vars
}) => {
  // –ü–†–û–°–¢–ê–Ø –û–¢–õ–ê–î–ö–ê –î–õ–Ø –ü–†–û–í–ï–†–ö–ò
  console.log('üî• KanbanBoard RENDERING at:', new Date().toISOString());
  
  // –û—Ç–ª–∞–¥–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  React.useEffect(() => {
    console.log('üèóÔ∏è KanbanBoard mounted/remounted at:', new Date().toISOString());
    return () => {
      console.log('üí• KanbanBoard unmounting at:', new Date().toISOString());
    };
  }, []);
  
  const [statuses, setStatuses] = useState<Status[]>([]);
  const [projects, setProjects] = useState<Project[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
  const [selectedStatusIndex, setSelectedStatusIndex] = useState(0);
  const [showStatusMenu, setShowStatusMenu] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è drag overlay
  const [activeProject, setActiveProject] = useState<Project | null>(null);

  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–Ω—Å–æ—Ä–æ–≤
  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    })
  );

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (showStatusMenu && !(event.target as Element).closest('.status-menu')) {
        setShowStatusMenu(false);
      }
    };

    if (showStatusMenu) {
      document.addEventListener('mousedown', handleClickOutside);
      return () => document.removeEventListener('mousedown', handleClickOutside);
    }
  }, [showStatusMenu]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏ –ø—Ä–æ–µ–∫—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const [statusesData, projectsData] = await Promise.all([
          getStatuses(companyId),
          getProjects({ companyId })
        ]);
        
        setStatuses(statusesData);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ProjectApiResponse –≤ Project
        const mappedProjects: Project[] = projectsData.map((project: ProjectApiResponse) => ({
          _id: project._id,
          name: project.name,
          customer: project.customer,
          status: project.statusId?.name || project.status,
          statusId: project.statusId,
          price: project.price,
          priceHistory: project.priceHistory,
          statusHistory: project.statusHistory,
          createdAt: project.createdAt,
          updatedAt: project.updatedAt,
          data: project.data
        }));
        
        setProjects(mappedProjects);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
        setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      } finally {
        setLoading(false);
      }
    };
    
    if (companyId) {
      loadData();
    } else {
      setLoading(false);
    }
  }, [companyId]);

  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ ID —Å—Ç–∞—Ç—É—Å–æ–≤
  const projectsByStatus = React.useMemo(() => {
    const byStatus: Record<string, Project[]> = {};
    statuses.forEach(status => {
      byStatus[status._id] = projects.filter(project => 
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ statusId._id –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞
        project.statusId?._id === status._id || 
        (project.status === status.name && !project.statusId)
      );
    });
    return byStatus;
  }, [projects, statuses]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
  const handleProjectMove = async (projectId: string, targetStatusId: string, statusName: string) => {
    try {
      // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const targetStatus = statuses.find(s => s._id === targetStatusId);
      if (!targetStatus) {
        throw new Error('–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç–∫–∞—Ç—ã–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      const originalProject = projects.find(p => p._id === projectId);
      if (!originalProject) {
        throw new Error('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
      setProjects(prev =>
        prev.map(p =>
          p._id === projectId 
            ? { 
                ...p, 
                status: targetStatus.name,
                statusId: {
                  _id: targetStatus._id,
                  name: targetStatus.name,
                  color: targetStatus.color,
                  order: targetStatus.order
                }
              } 
            : p
        )
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await updateProjectStatus(projectId, targetStatusId);
      console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å ${statusName}`);
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', err);
      
      // –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç–∫–∞—Ç–∞
      const originalProject = projects.find(p => p._id === projectId);
      
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (originalProject) {
        setProjects(prev =>
          prev.map(p =>
            p._id === projectId 
              ? originalProject
              : p
          )
        );
      }
      
      throw err; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ UI
    }
  };

  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ DndContext –≤–æ–æ–±—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
  const handleDragStart = (event: DragStartEvent) => {
    console.log('üéâ SUCCESS! DRAG STARTED!', event);
    const { active } = event;
    const project = projects.find(p => p._id === active.id);
    setActiveProject(project || null);
    console.log('Project found:', project?.name);
  };

  const handleDragOver = (event: DragOverEvent) => {
    const { active, over } = event;
    console.log('üîÑ Drag over:', {
      activeId: active.id,
      overId: over?.id,
      hasTarget: !!over
    });
  };

  const handleDragEnd = async (event: DragEndEvent) => {
    const { active, over } = event;
    
    console.log('üèÅ Drag end:', {
      activeId: active.id,
      overId: over?.id,
      hasTarget: !!over
    });
    
    setActiveProject(null);
    
    if (!over) {
      console.log('‚ùå No drop target');
      return;
    }

    const projectId = active.id as string;
    const targetStatusId = over.id as string;
    
    // –ù–∞–π—Ç–∏ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞—Ç—É—Å
    const targetStatus = statuses.find(status => String(status._id) === targetStatusId);
    if (!targetStatus) {
      console.error('‚ùå Target status not found:', targetStatusId);
      return;
    }

    // –ù–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç
    const project = projects.find(p => p._id === projectId);
    if (!project) {
      console.error('‚ùå Project not found:', projectId);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
    if (project.statusId?._id === targetStatusId) {
      console.log('‚ùå Same status, no change needed');
      return;
    }

    console.log('üîÑ Moving project:', project.name, 'to status:', targetStatus.name);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setProjects(prev =>
      prev.map(p =>
        p._id === projectId 
          ? { 
              ...p, 
              status: targetStatus.name,
              statusId: {
                _id: targetStatus._id,
                name: targetStatus.name,
                color: targetStatus.color,
                order: targetStatus.order
              }
            } 
          : p
      )
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    try {
      await updateProjectStatus(projectId, targetStatusId);
      console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å ${targetStatus.name}`);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞');
      setTimeout(() => setError(null), 3000);
      
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      setProjects(prev =>
        prev.map(p =>
          p._id === projectId 
            ? { 
                ...p, 
                status: project.status,
                statusId: project.statusId
              } 
            : p
        )
      );
    }
  };

  if (loading) {
    return (
      <div style={{ padding: 40, textAlign: 'center' }}>
        <div style={{ color: '#666' }}>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div style={{ padding: 40, textAlign: 'center' }}>
        <div style={{ color: '#d32f2f' }}>–û—à–∏–±–∫–∞: {error}</div>
      </div>
    );
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  const renderMobileView = () => (
    <DndContext
      sensors={sensors}
      collisionDetection={closestCenter}
      onDragStart={handleDragStart}
      onDragOver={handleDragOver}
      onDragEnd={handleDragEnd}
    >
      <div style={{ padding: '0 8px', height: '100%' }}>
        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
        {error && (
          <div style={{
            background: '#ffebee',
            border: '1px solid #f44336',
            borderRadius: 8,
            padding: 12,
            marginBottom: 16,
            color: '#d32f2f',
            fontSize: 14
          }}>
            ‚ö†Ô∏è {error}
          </div>
        )}

        {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –º–æ–±–∞–π–ª–∞ */}
        <div className="status-menu" style={{ marginBottom: 16, position: 'relative' }}>
          <button
            onClick={() => setShowStatusMenu(!showStatusMenu)}
            style={{
              width: '100%',
              padding: '12px 16px',
              background: '#f8f9fa',
              border: '1px solid #e0e0e0',
              borderRadius: 8,
              fontSize: 14,
              fontWeight: 600,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              cursor: 'pointer'
            }}
          >
            <span style={{ display: 'flex', alignItems: 'center' }}>
              <div 
                style={{ 
                  width: 12, 
                  height: 12, 
                  borderRadius: 6, 
                  background: statuses[selectedStatusIndex]?.color || '#ccc',
                  marginRight: 8 
                }} 
              />
              {statuses[selectedStatusIndex]?.name || '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å'}
              <span style={{ 
                marginLeft: 8,
                background: '#e0e0e0',
                borderRadius: 12,
                padding: '2px 6px',
                fontSize: 11
              }}>
                {projectsByStatus[statuses[selectedStatusIndex]?._id]?.length || 0}
              </span>
            </span>
            <span style={{ fontSize: 12 }}>{showStatusMenu ? '‚ñ≤' : '‚ñº'}</span>
          </button>

          {showStatusMenu && (
            <div style={{
              position: 'absolute',
              top: '100%',
              left: 0,
              right: 0,
              background: '#fff',
              border: '1px solid #e0e0e0',
              borderRadius: 8,
              boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
              zIndex: 1000,
              maxHeight: Math.min(
                statuses.length * 48 + 16,
                Math.max(window.innerHeight - 280, 200)
              ),
              overflowY: statuses.length * 48 + 16 > window.innerHeight - 280 ? 'auto' : 'visible'
            }}>
              {statuses.map((status, index) => (
                <div
                  key={status._id}
                  onClick={() => {
                    setSelectedStatusIndex(index);
                    setShowStatusMenu(false);
                  }}
                  style={{
                    padding: '12px 16px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    cursor: 'pointer',
                    background: index === selectedStatusIndex ? '#f0f8ff' : 'transparent',
                    borderBottom: index < statuses.length - 1 ? '1px solid #f0f0f0' : 'none'
                  }}
                >
                  <span style={{ display: 'flex', alignItems: 'center' }}>
                    <div 
                      style={{ 
                        width: 12, 
                        height: 12, 
                        borderRadius: 6, 
                        background: status.color,
                        marginRight: 8 
                      }} 
                    />
                    {status.name}
                  </span>
                  <span style={{ 
                    background: '#e0e0e0',
                    borderRadius: 12,
                    padding: '2px 6px',
                    fontSize: 11
                  }}>
                    {projectsByStatus[status._id]?.length || 0}
                  </span>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* –û–¥–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ */}
        {statuses[selectedStatusIndex] && (
          <DroppableStatus 
            status={statuses[selectedStatusIndex]}
            projects={projectsByStatus[statuses[selectedStatusIndex]._id] || []}
            onProjectEdit={onProjectEdit}
            onProjectMove={handleProjectMove}
            isDesktop={false}
          />
        )}
      </div>
      
      <DragOverlay>
        {activeProject ? <ProjectCard project={activeProject} isOverlay /> : null}
      </DragOverlay>
    </DndContext>
  );

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  const renderDesktopView = () => (
    <DndContext
      sensors={sensors}
      collisionDetection={closestCenter}
      onDragStart={handleDragStart}
      onDragOver={handleDragOver}
      onDragEnd={handleDragEnd}
    >
      <div style={{ 
        padding: '16px', 
        height: '100%', 
        position: 'relative',
        minHeight: '100%'
      }}>
        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
        {error && (
          <div style={{
            background: '#ffebee',
            border: '1px solid #f44336',
            borderRadius: 8,
            padding: 12,
            marginBottom: 16,
            color: '#d32f2f',
            fontSize: 14
          }}>
            ‚ö†Ô∏è {error}
          </div>
        )}
        
        <div 
          className="kanban-board"
          style={{ 
            display: 'flex',
            overflowX: 'auto',
            overflowY: 'hidden',
            gap: 8,
            paddingBottom: 16,
            paddingRight: 16,
            minHeight: '200px',
            height: '100%',
            minWidth: 'fit-content',
            scrollbarWidth: 'thin',
            scrollbarColor: '#c1c1c1 #f1f1f1'
          }}
        >
          {statuses.map(status => (
            <DroppableStatus 
              key={status._id}
              status={status}
              projects={projectsByStatus[status._id] || []}
              onProjectEdit={onProjectEdit}
              onProjectMove={handleProjectMove}
              isDesktop={true}
            />
          ))}
        </div>
      </div>
      
      <DragOverlay>
        {activeProject ? <ProjectCard project={activeProject} isOverlay /> : null}
      </DragOverlay>
    </DndContext>
  );

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–µ—Ä—Å–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
  return (
    <>
      {isMobile ? renderMobileView() : renderDesktopView()}
      {/* CSS —Å—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ */}
      <style>{`
        /* –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ */
        .kanban-board::-webkit-scrollbar {
          height: 8px;
        }
        .kanban-board::-webkit-scrollbar-track {
          background: transparent;
        }
        .kanban-board::-webkit-scrollbar-thumb {
          background: #c1c1c1;
          border-radius: 4px;
        }
        .kanban-board::-webkit-scrollbar-thumb:hover {
          background: #a1a1a1;
        }
      `}</style>
    </>
  );
};

export default KanbanBoard; 