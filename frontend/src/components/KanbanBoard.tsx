import React, { useState, useEffect } from 'react';
import {
  DndContext,
  DragOverlay,
  closestCenter,
  PointerSensor,
  useSensor,
  useSensors,
  useDroppable,
  type DragEndEvent,
  type DragOverEvent,
  type DragStartEvent,
} from '@dnd-kit/core';
import {
  SortableContext,
  useSortable,
  verticalListSortingStrategy,
} from '@dnd-kit/sortable';
import {
  CSS,
} from '@dnd-kit/utilities';
import { getStatuses } from '../utils/statusApi';
import { getProjects, updateProjectStatus, type ProjectApiResponse } from '../utils/api';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface Status {
  _id: string;
  name: string;
  color: string;
  order: number;
  companyId: string;
  isDefault: boolean;
  isActive: boolean;
}

interface Project {
  _id: string;
  name: string;
  customer?: string;
  status?: string;
  statusId?: {
    _id: string;
    name: string;
    color: string;
    order: number;
  };
  price?: number;
  priceHistory?: { price: number; date: string }[];
  statusHistory?: { status: string; statusId?: string; date: string }[];
  createdAt: string;
  updatedAt: string;
  data?: Record<string, unknown>;
}

interface KanbanBoardProps {
  companyId: string;
  onProjectEdit?: (project: Project) => void;
  onProjectDelete?: (project: Project) => void;
  searchTerm?: string;
  dateFilter?: 'all' | 'today' | 'week' | 'month' | 'custom';
  customDateFrom?: string;
  customDateTo?: string;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ª–µ–π–±–ª—ã –∫–∞–∫ –≤ ProjectHistory
const configLabels: Record<string, string> = {
  glass: '–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ —Å—Ç–µ–∫–ª–æ',
  straight: '–ü—Ä—è–º–∞—è —Ä–∞–∑–¥–≤–∏–∂–Ω–∞—è',
  'straight-opening': '–ü—Ä—è–º–∞—è —Ä–∞–∑–¥–≤–∏–∂–Ω–∞—è',
  'straight-glass': '–ü—Ä—è–º–∞—è —Ä–∞–∑–¥–≤–∏–∂–Ω–∞—è',
  corner: '–£–≥–ª–æ–≤–∞—è —Ä–∞–∑–¥–≤–∏–∂–Ω–∞—è',
  unique: '–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
  partition: '–ü–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–µ–π–±–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const getConfigLabel = (config: string): string => {
  return configLabels[config] || config;
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
interface SortableProjectProps {
  project: Project;
  isOverlay?: boolean;
  onEdit?: (project: Project) => void;
  onProjectMove?: (projectId: string, targetStatusId: string, statusName: string, insertPosition?: number) => Promise<void>;
  isDragActive?: boolean;
  onSetDragActive?: (active: boolean) => void;
  statuses?: Status[];
  projectIndex?: number;
  statusId?: string;
  insertionPosition?: {statusId: string; position: number} | null;
  projectsByStatus?: Record<string, Project[]>;
  onInsertionPositionChange?: (position: {statusId: string; position: number} | null) => void;
}

const SortableProject: React.FC<SortableProjectProps> = ({ 
  project, 
  isOverlay = false, 
  onEdit, 
  onProjectMove, 
  isDragActive = false, 
  onSetDragActive, 
  statuses = [], // eslint-disable-line @typescript-eslint/no-unused-vars
  projectIndex = 0, 
  statusId, 
  insertionPosition,
  projectsByStatus = {},
  onInsertionPositionChange
}) => {
  const [isHovered, setIsHovered] = React.useState(false);
  const projectRef = React.useRef<HTMLDivElement>(null);
  const lastInsertionPositionRef = React.useRef<{statusId: string; position: number} | null>(null);
  
  // Touch handling states
  const [isTouchStarted, setIsTouchStarted] = React.useState(false);
  const [longPressTimer, setLongPressTimer] = React.useState<number | null>(null);
  const [isDragMode, setIsDragMode] = React.useState(false);
  const [touchStartPos, setTouchStartPos] = React.useState<{x: number, y: number} | null>(null);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å spacing —Å–≤–µ—Ä—Ö—É –∏–ª–∏ —Å–Ω–∏–∑—É
  const shouldAddSpaceAbove = insertionPosition?.statusId === statusId && insertionPosition?.position === projectIndex;
  const shouldAddSpaceBelow = insertionPosition?.statusId === statusId && insertionPosition?.position === projectIndex + 1;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ insertionPosition –≤ ref –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ handleMouseUp
  React.useEffect(() => {
    lastInsertionPositionRef.current = insertionPosition || null;
  }, [insertionPosition]);
  
  const sortableResult = useSortable({
    id: project._id,
  });

  const {
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = sortableResult;

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.3 : 1, // –î–µ–ª–∞–µ–º –ø–æ—á—Ç–∏ –Ω–µ–≤–∏–¥–∏–º—ã–º –≤–æ –≤—Ä–µ–º—è –¥—Ä–∞–≥–∞
    zIndex: isDragging ? -1 : 1, // –£–±–∏—Ä–∞–µ–º –Ω–∞ –∑–∞–¥–Ω–∏–π –ø–ª–∞–Ω
  };

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è drag and drop
  const [isDraggingManual, setIsDraggingManual] = React.useState(false);
  
  // –û—Ç–∫–ª—é—á–∞–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç—ã –≤–æ –≤—Ä–µ–º—è –¥—Ä–∞–≥–∞ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
  const shouldShowHover = isHovered && (!isDragActive || isDragging || isDraggingManual);

  // Touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
  const handleTouchStart = (e: React.TouchEvent) => {
    const touch = e.touches[0];
    setIsTouchStarted(true);
    setTouchStartPos({ x: touch.clientX, y: touch.clientY });
    setIsDragMode(false);
    
    // –ù–ï –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ–∑–≤–æ–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–∫—Ä–æ–ª–ª
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è (3 —Å–µ–∫—É–Ω–¥—ã)
    const timer = setTimeout(() => {
      console.log('üî• LONG PRESS DETECTED - Starting drag mode for:', project.name);
      setIsDragMode(true);
      setIsTouchStarted(false);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–±—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
      if (navigator.vibrate) {
        navigator.vibrate(50);
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º drag –æ–ø–µ—Ä–∞—Ü–∏—é
      handleTouchDragStart();
    }, 3000);
    
    setLongPressTimer(timer);
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    if (!isTouchStarted && !isDragMode) return;
    
    const touch = e.touches[0];
    const startPos = touchStartPos;
    
    if (startPos && isTouchStarted) {
      const deltaX = Math.abs(touch.clientX - startPos.x);
      const deltaY = Math.abs(touch.clientY - startPos.y);
      
      // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
      const isVerticalSwipe = deltaY > deltaX && deltaY > 15;
      const isHorizontalSwipe = deltaX > deltaY && deltaX > 15;
      const isAnySwipe = deltaX > 15 || deltaY > 15;
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Å–≤–∞–π–ø –∏ –º—ã –Ω–µ –≤ drag mode - —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–∫—Ä–æ–ª–ª
      if (isAnySwipe && !isDragMode) {
        console.log('üì± SWIPE DETECTED:', {
          deltaX,
          deltaY,
          isVerticalSwipe,
          isHorizontalSwipe,
          direction: isVerticalSwipe ? 'vertical' : isHorizontalSwipe ? 'horizontal' : 'diagonal'
        });
        
        // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
        if (longPressTimer) {
          clearTimeout(longPressTimer);
          setLongPressTimer(null);
        }
        
        setIsTouchStarted(false);
        setTouchStartPos(null);
        
        // –ù–ï –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–æ–±—ã—Ç–∏–µ - –ø–æ–∑–≤–æ–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∫—Ä–æ–ª–ª
        return;
      }
    }
    
    // –ï—Å–ª–∏ –º—ã –≤ drag mode - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º drag
    if (isDragMode) {
      e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –¥—Ä–∞–≥–∞
      e.stopPropagation();
      handleTouchDragMove(touch);
    }
  };

  const handleTouchEnd = (e: React.TouchEvent) => {
    // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
    if (longPressTimer) {
      clearTimeout(longPressTimer);
      setLongPressTimer(null);
    }
    
    const touch = e.changedTouches[0];
    
    // –ï—Å–ª–∏ –º—ã –≤ drag mode - –∑–∞–≤–µ—Ä—à–∞–µ–º drag
    if (isDragMode) {
      console.log('üèÅ TOUCH DRAG END');
      handleTouchDragEnd(touch);
      setIsDragMode(false);
    } else if (isTouchStarted) {
      // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –±—ã—Å—Ç—Ä—ã–π —Ç–∞–ø - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
      console.log('üëÜ TAP DETECTED - Opening project details:', project.name);
      if (onEdit) onEdit(project);
    }
    
    setIsTouchStarted(false);
    setTouchStartPos(null);
  };

  const handleTouchDragStart = () => {
    setIsDraggingManual(true);
    onSetDragActive?.(true);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è drag mode
    document.body.style.cursor = 'grabbing';
    document.body.style.userSelect = 'none';
    document.body.classList.add('dragging-active');
    
    console.log('üî• TOUCH DRAG STARTED:', project.name);
  };

  const handleTouchDragMove = (touch: React.Touch) => {
    // –õ–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ handleMouseMove, –Ω–æ –¥–ª—è touch
    const elementUnderTouch = document.elementFromPoint(touch.clientX, touch.clientY);
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    document.querySelectorAll('.kanban-column').forEach(col => {
      const element = col as HTMLElement;
      element.classList.remove('drag-highlight');
    });
    
    // –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É –ø–æ–¥ touch point
    let dropZone = elementUnderTouch;
    let attempts = 0;
    
    while (dropZone && attempts < 10) {
      if (dropZone.classList?.contains('kanban-column')) {
        const columnElement = dropZone as HTMLElement;
        columnElement.classList.add('drag-highlight');
        
        const statusId = columnElement.getAttribute('data-status-id');
        if (statusId) {
          const statusProjects = projectsByStatus[statusId] || [];
          
          // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç touch
          const columnRect = columnElement.getBoundingClientRect();
          const touchY = touch.clientY;
          const relativeY = touchY - columnRect.top;
          
          const projectCards = columnElement.querySelectorAll('[data-project-id]');
          let insertPosition = 0;
          
          for (let i = 0; i < projectCards.length; i++) {
            const cardElement = projectCards[i] as HTMLElement;
            const cardRect = cardElement.getBoundingClientRect();
            const cardMiddle = cardRect.top - columnRect.top + cardRect.height / 2;
            
            if (relativeY < cardMiddle) {
              insertPosition = i;
              break;
            } else {
              insertPosition = i + 1;
            }
          }
          
          insertPosition = Math.max(0, Math.min(insertPosition, statusProjects.length));
          
          const currentPosition = insertionPosition;
          const isPositionChanged = !currentPosition || 
            currentPosition.statusId !== statusId || 
            currentPosition.position !== insertPosition;
          
          if (isPositionChanged) {
            console.log('üéØ TOUCH DRAG - INSERTION POSITION CHANGED:', { 
              from: currentPosition,
              to: { statusId, position: insertPosition },
              totalProjects: statusProjects.length 
            });
            onInsertionPositionChange?.({ statusId, position: insertPosition });
          }
        }
        break;
      }
      dropZone = dropZone.parentElement;
      attempts++;
    }
    
    if (attempts >= 10) {
      onInsertionPositionChange?.(null);
    }
  };

  const handleTouchDragEnd = async (touch: React.Touch) => {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    document.querySelectorAll('.kanban-column').forEach(col => {
      const element = col as HTMLElement;
      element.classList.remove('drag-highlight');
    });
    
    const savedInsertionPosition = lastInsertionPositionRef.current;
    
    setIsDraggingManual(false);
    onSetDragActive?.(false);
    onInsertionPositionChange?.(null);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏
    document.body.style.cursor = '';
    document.body.style.userSelect = '';
    document.body.classList.remove('dragging-active');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è drop
    const elementUnderTouch = document.elementFromPoint(touch.clientX, touch.clientY);
    let dropZone = elementUnderTouch;
    let attempts = 0;
    
    while (dropZone && attempts < 10) {
      const statusId = dropZone.getAttribute('data-status-id');
      const statusName = dropZone.getAttribute('data-status-name');
      
      if (statusId && statusName) {
        const insertPositionToUse = savedInsertionPosition?.statusId === statusId 
          ? savedInsertionPosition.position 
          : undefined;
          
        console.log('üìç TOUCH DROP on column:', statusName, 'with insertion position:', insertPositionToUse);
        
        const isSameStatus = project.statusId?._id === statusId;
        const isDifferentPosition = insertPositionToUse !== undefined;
        
        if (!isSameStatus || isDifferentPosition) {
          const positionText = insertPositionToUse !== undefined 
            ? ` –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${insertPositionToUse + 1}` 
            : '';
          const loadingMessage = `–ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø—Ä–æ–µ–∫—Ç "${project.name}"${positionText}...`;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          const notification = document.createElement('div');
          notification.innerHTML = `
            <div style="display: flex; align-items: center; justify-content: space-between;">
              <span>${loadingMessage}</span>
              <button style="
                background: none;
                border: none;
                color: white;
                font-size: 16px;
                cursor: pointer;
                padding: 0 0 0 12px;
                margin: 0;
                line-height: 1;
              " onclick="this.parentElement.parentElement.remove()">‚úï</button>
            </div>
          `;
          notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #2196f3;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            z-index: 10000;
            font-weight: 600;
          `;
          document.body.appendChild(notification);
          
          // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø—Ä–æ–µ–∫—Ç
          if (onProjectMove) {
            try {
              await onProjectMove(project._id, statusId, statusName, insertPositionToUse);
              
              const successText = insertPositionToUse !== undefined 
                ? ` –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${insertPositionToUse + 1}` 
                : '';
              notification.innerHTML = `
                <div style="display: flex; align-items: center; justify-content: space-between;">
                  <span>–ü—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ "${statusName}"${successText}</span>
                  <button style="
                    background: none;
                    border: none;
                    color: white;
                    font-size: 16px;
                    cursor: pointer;
                    padding: 0 0 0 12px;
                    margin: 0;
                    line-height: 1;
                  " onclick="this.parentElement.parentElement.remove()">‚úï</button>
                </div>
              `;
              notification.style.background = '#4caf50';
              
              setTimeout(() => {
                if (notification.parentNode) {
                  document.body.removeChild(notification);
                }
              }, 3000);
              
            } catch (err) {
              notification.innerHTML = `
                <div style="display: flex; align-items: center; justify-content: space-between;">
                  <span>–û—à–∏–±–∫–∞: ${err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç'}</span>
                  <button style="
                    background: none;
                    border: none;
                    color: white;
                    font-size: 16px;
                    cursor: pointer;
                    padding: 0 0 0 12px;
                    margin: 0;
                    line-height: 1;
                  " onclick="this.parentElement.parentElement.remove()">‚úï</button>
                </div>
              `;
              notification.style.background = '#f44336';
              
              setTimeout(() => {
                if (notification.parentNode) {
                  document.body.removeChild(notification);
                }
              }, 5000);
            }
          }
        }
        return;
      }
      
      dropZone = dropZone.parentElement;
      attempts++;
    }
    
    console.log('‚ùå Invalid touch drop zone');
  };
  
  const handleManualMouseDown = (e: React.MouseEvent) => {
    e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
    
    const startX = e.clientX;
    const startY = e.clientY;
    let moved = false;
    let dragElement: HTMLElement | null = null;
    
    // –†–∞–∑–º–µ—Ä—ã –ª–µ—Ç–∞—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ, –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Å—Ç–∏–ª—è—Ö)
    const flyingCardWidth = 280; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –ª–µ—Ç–∞—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    const flyingCardHeight = 120; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ª–µ—Ç–∞—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    
    // –í—ã—á–∏—Å–ª—è–µ–º offset –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–æ —à–∏—Ä–∏–Ω–µ –∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —Ç—Ä–µ—Ç–∏ –ø–æ –≤—ã—Å–æ—Ç–µ –ª–µ—Ç–∞—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    const offsetX = -flyingCardWidth / 2;  // –ö—É—Ä—Å–æ—Ä –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–æ —à–∏—Ä–∏–Ω–µ
    const offsetY = -flyingCardHeight / 3; // –ö—É—Ä—Å–æ—Ä –≤ –≤–µ—Ä—Ö–Ω–µ–π —Ç—Ä–µ—Ç–∏ –ø–æ –≤—ã—Å–æ—Ç–µ
    
    const handleMouseMove = (event: MouseEvent) => {
      const deltaX = Math.abs(event.clientX - startX);
      const deltaY = Math.abs(event.clientY - startY);
      
      if (!moved && (deltaX > 5 || deltaY > 5)) {
        moved = true;
        setIsDraggingManual(true);
        onSetDragActive?.(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥—Ä–∞–≥–∞
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä grabbing –Ω–∞ –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç
        document.body.style.cursor = 'grabbing';
        document.body.style.userSelect = 'none';
        document.body.classList.add('dragging-active');
        
        console.log('üî• MANUAL DRAG STARTED:', project.name);
        
        // –°–æ–∑–¥–∞–µ–º –ª–µ—Ç–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        dragElement = document.createElement('div');
        dragElement.innerHTML = `
          <div style="
            background: #f0f8ff;
            border: 2px solid #2196f3;
            border-radius: 8px;
            padding: 12px;
            box-shadow: 0 8px 24px rgba(33, 150, 243, 0.4);
            opacity: 0.9;
            pointer-events: none;
            z-index: 9999;
            position: fixed;
            transform: rotate(3deg);
            width: ${flyingCardWidth}px;
            box-sizing: border-box;
          ">
            <div style="font-weight: 600; font-size: 16px; color: #000; margin-bottom: 4px;">
              ${project.name}
            </div>
            <div style="color: #666; font-size: 12px;">
              –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ...
            </div>
          </div>
        `;
        dragElement.style.position = 'fixed';
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –∫—É—Ä—Å–æ—Ä –±—ã–ª –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–æ —à–∏—Ä–∏–Ω–µ –∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —Ç—Ä–µ—Ç–∏ –ø–æ –≤—ã—Å–æ—Ç–µ
        dragElement.style.left = event.clientX + offsetX + 'px';
        dragElement.style.top = event.clientY + offsetY + 'px';
        dragElement.style.zIndex = '9999';
        dragElement.style.pointerEvents = 'none';
        document.body.appendChild(dragElement);
      }
      
      if (moved && dragElement) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ª–µ—Ç–∞—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º offset
        dragElement.style.left = event.clientX + offsetX + 'px';
        dragElement.style.top = event.clientY + offsetY + 'px';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        const elementUnderMouse = document.elementFromPoint(event.clientX, event.clientY);
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ - —Ç–æ–ª—å–∫–æ —Ç–æ —á—Ç–æ –º—ã –¥–æ–±–∞–≤–ª—è–ª–∏
        document.querySelectorAll('.kanban-column').forEach(col => {
          const element = col as HTMLElement;
          element.classList.remove('drag-highlight');
        });
        
        // –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏
        let dropZone = elementUnderMouse;
        let attempts = 0;
        
        while (dropZone && attempts < 10) {
          if (dropZone.classList?.contains('kanban-column')) {
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É —á–µ—Ä–µ–∑ CSS –∫–ª–∞—Å—Å
            const columnElement = dropZone as HTMLElement;
            columnElement.classList.add('drag-highlight');
            
            // –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            const statusId = columnElement.getAttribute('data-status-id');
            if (statusId) {
              const statusProjects = projectsByStatus[statusId] || [];
              
              // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º—ã—à–∏
              const columnRect = columnElement.getBoundingClientRect();
              const mouseY = event.clientY;
              const relativeY = mouseY - columnRect.top;
              
              // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ
              const projectCards = columnElement.querySelectorAll('[data-project-id]');
              let insertPosition = 0;
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫
              for (let i = 0; i < projectCards.length; i++) {
                const cardElement = projectCards[i] as HTMLElement;
                const cardRect = cardElement.getBoundingClientRect();
                const cardMiddle = cardRect.top - columnRect.top + cardRect.height / 2;
                
                if (relativeY < cardMiddle) {
                  insertPosition = i;
                  break;
                } else {
                  insertPosition = i + 1;
                }
              }
              
              // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
              insertPosition = Math.max(0, Math.min(insertPosition, statusProjects.length));
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –ø–æ–∑–∏—Ü–∏—è
              const currentPosition = insertionPosition;
              const isPositionChanged = !currentPosition || 
                currentPosition.statusId !== statusId || 
                currentPosition.position !== insertPosition;
              
              if (isPositionChanged) {
                                 console.log('üéØ MANUAL DRAG - INSERTION POSITION CHANGED:', { 
                   from: currentPosition,
                   to: { statusId, position: insertPosition },
                   totalProjects: statusProjects.length 
                 });
                 onInsertionPositionChange?.({ statusId, position: insertPosition });
              }
            }
            break;
          }
          dropZone = dropZone.parentElement;
          attempts++;
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–ª–æ–Ω–∫—É, –æ—á–∏—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏
        if (attempts >= 10) {
          onInsertionPositionChange?.(null);
        }
      }
    };
    
    const handleMouseUp = async (event: MouseEvent) => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      
      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
      document.querySelectorAll('.kanban-column').forEach(col => {
        const element = col as HTMLElement;
        element.classList.remove('drag-highlight');
      });
      
      if (dragElement) {
        document.body.removeChild(dragElement);
      }
      
      // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ ref –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ drop
      const savedInsertionPosition = lastInsertionPositionRef.current;
      
      setIsDraggingManual(false);
      onSetDragActive?.(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥—Ä–∞–≥–∞
      onInsertionPositionChange?.(null); // –û—á–∏—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–µ
      document.body.style.cursor = '';
      document.body.style.userSelect = '';
      document.body.classList.remove('dragging-active');
      
              if (moved) {
          console.log('üèÅ MANUAL DRAG ENDED:', project.name);
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è drop (insertion point –∏–ª–∏ –∫–æ–ª–æ–Ω–∫–∞)
          const elementUnderMouse = document.elementFromPoint(event.clientX, event.clientY);
          let dropZone = elementUnderMouse;
          let attempts = 0;
          
          while (dropZone && attempts < 10) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –°–û–•–†–ê–ù–ï–ù–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ insertionPosition
            const statusId = dropZone.getAttribute('data-status-id');
            const statusName = dropZone.getAttribute('data-status-name');
            
            if (statusId && statusName) {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–û–•–†–ê–ù–ï–ù–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ insertionPosition –µ—Å–ª–∏ –µ—Å—Ç—å
              const insertPositionToUse = savedInsertionPosition?.statusId === statusId 
                ? savedInsertionPosition.position 
                : undefined;
                
              console.log('üìç DROP on column:', statusName, 'with insertion position:', insertPositionToUse);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å
              const isSameStatus = project.statusId?._id === statusId;
              const isDifferentPosition = insertPositionToUse !== undefined;
              
              console.log('üîç DROP DEBUG:', {
                projectName: project.name,
                fromStatus: project.statusId?.name,
                toStatus: statusName,
                savedInsertionPosition,
                insertPosition: insertPositionToUse,
                isSameStatus,
                isDifferentPosition
              });
              
              if (!isSameStatus || isDifferentPosition) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                const positionText = insertPositionToUse !== undefined 
                  ? ` –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${insertPositionToUse + 1}` 
                  : '';
                const loadingMessage = `–ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø—Ä–æ–µ–∫—Ç "${project.name}"${positionText}...`;
                const notification = document.createElement('div');
                notification.innerHTML = `
                  <div style="display: flex; align-items: center; justify-content: space-between;">
                    <span>${loadingMessage}</span>
                    <button style="
                      background: none;
                      border: none;
                      color: white;
                      font-size: 16px;
                      cursor: pointer;
                      padding: 0 0 0 12px;
                      margin: 0;
                      line-height: 1;
                    " onclick="this.parentElement.parentElement.remove()">‚úï</button>
                  </div>
                `;
                notification.style.cssText = `
                  position: fixed;
                  top: 20px;
                  right: 20px;
                  background: #2196f3;
                  color: white;
                  padding: 12px 20px;
                  border-radius: 8px;
                  box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                  z-index: 10000;
                  font-weight: 600;
                `;
                document.body.appendChild(notification);
                
                // –†–µ–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–∑–∏—Ü–∏–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å
                if (onProjectMove) {
                  try {
                    await onProjectMove(project._id, statusId, statusName, insertPositionToUse);
                    
                    // –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                    const successText = insertPositionToUse !== undefined 
                      ? ` –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${insertPositionToUse + 1}` 
                      : '';
                    notification.innerHTML = `
                      <div style="display: flex; align-items: center; justify-content: space-between;">
                        <span>–ü—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ "${statusName}"${successText}</span>
                        <button style="
                          background: none;
                          border: none;
                          color: white;
                          font-size: 16px;
                          cursor: pointer;
                          padding: 0 0 0 12px;
                          margin: 0;
                          line-height: 1;
                        " onclick="this.parentElement.parentElement.remove()">‚úï</button>
                      </div>
                    `;
                    notification.style.background = '#4caf50';
                    
                    setTimeout(() => {
                      if (notification.parentNode) {
                        document.body.removeChild(notification);
                      }
                    }, 3000);
                    
                  } catch (err) {
                    // –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                    notification.innerHTML = `
                      <div style="display: flex; align-items: center; justify-content: space-between;">
                        <span>–û—à–∏–±–∫–∞: ${err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç'}</span>
                        <button style="
                          background: none;
                          border: none;
                          color: white;
                          font-size: 16px;
                          cursor: pointer;
                          padding: 0 0 0 12px;
                          margin: 0;
                          line-height: 1;
                        " onclick="this.parentElement.parentElement.remove()">‚úï</button>
                      </div>
                    `;
                    notification.style.background = '#f44336';
                    
                    setTimeout(() => {
                      if (notification.parentNode) {
                        document.body.removeChild(notification);
                      }
                    }, 5000);
                  }
                }
                
              } else {
                console.log('‚ö†Ô∏è Same position in same column - no move needed');
              }
              return;
            }
            
            dropZone = dropZone.parentElement;
            attempts++;
          }
          
          console.log('‚ùå Invalid drop zone');
        } else {
          // –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
          if (onEdit) onEdit(project);
        }
    };
    
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
  };

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ @dnd-kit
  const testHandlers = {
    onMouseDown: handleManualMouseDown,
    onTouchStart: handleTouchStart,
    onTouchMove: handleTouchMove,
    onTouchEnd: handleTouchEnd
  };

  return (
    <div
      ref={(node) => {
        setNodeRef(node);
        if (projectRef.current !== node) {
          projectRef.current = node;
        }
      }}
      {...testHandlers}
      data-project-id={project._id}
      data-drag-mode={isDragMode ? 'true' : 'false'}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      style={{
        ...style,
        cursor: isDraggingManual ? 'grabbing' : isHovered ? 'grab' : 'pointer',
        // –£–±–∏—Ä–∞–µ–º transition –¥–ª—è margin –≤–æ –≤—Ä–µ–º—è dragActive
        transition: isDragActive ? 'margin 0.2s ease' : (isDragging || isDraggingManual) ? 'none' : 'all 0.2s ease',
        touchAction: isDragMode ? 'none' : 'auto',
        userSelect: 'none',
        WebkitUserSelect: 'none',
        borderRadius: '8px',
        pointerEvents: 'auto',
        opacity: isDraggingManual ? 0.7 : 1,
        minHeight: '60px',
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π spacing –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å—Ç–∞–≤–∫–∏
        marginTop: shouldAddSpaceAbove ? '80px' : '8px',
        marginBottom: shouldAddSpaceBelow ? '80px' : '8px',
      }}
    >
      <ProjectCard 
        project={project} 
        isOverlay={isOverlay} 
        isHovered={shouldShowHover}
        isDragging={isDragging}
        isDraggingManual={isDraggingManual}
      />
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
interface ProjectCardProps {
  project: Project;
  isOverlay?: boolean;
  isHovered?: boolean;
  isDragging?: boolean;
  isDraggingManual?: boolean;
}

const ProjectCard: React.FC<ProjectCardProps> = ({ 
  project, 
  isOverlay = false, 
  isHovered = false, 
  isDragging = false,
  isDraggingManual = false
}) => {
  const isMobile = window.innerWidth < 768;
  
  return (
    <div
      style={{
        marginBottom: 8,
        background: isOverlay || isDraggingManual
          ? '#e3f2fd' 
          : isHovered 
            ? '#f0f8ff' 
            : '#ffffff',
        borderRadius: 8,
        padding: isMobile ? 12 : 16,
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏–Ω—è—è —Ä–∞–º–∫–∞ –ø—Ä–∏ hover –∏ dragging
        border: (isOverlay || isHovered || isDraggingManual)
          ? '2px solid #2196f3' 
          : '1px solid #f0f0f0',
        boxShadow: isOverlay || isDraggingManual
          ? '0 8px 24px rgba(33, 150, 243, 0.4)' 
          : 'none',
        userSelect: 'none',
        transition: isOverlay || isDragging || isDraggingManual ? 'none' : 'all 0.2s ease',
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ä–∞–º–∫–∞ —Ç–æ—á–Ω–æ –≤—ã—Ä–æ–≤–Ω–µ–Ω–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
        boxSizing: 'border-box',
      }}
    >
      {/* –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ */}
      <div style={{ 
        fontWeight: 600, 
        fontSize: 18, 
        marginBottom: 8, 
        wordBreak: 'break-word', 
        color: '#000'
      }}>
        {project.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
        {project.data && 
         typeof project.data === 'object' && 
         'config' in project.data && 
         typeof project.data.config === 'string' && (
          <span style={{ 
            color: '#666', 
            fontWeight: 400, 
            fontSize: 16 
          }}>
            {' '}({getConfigLabel(project.data.config)})
          </span>
        )}
      </div>
      
      {/* –ó–∞–∫–∞–∑—á–∏–∫ */}
      {project.customer && (
        <div style={{ 
          color: '#666', 
          fontSize: 14, 
          marginBottom: 8, 
          fontStyle: 'italic'
        }}>
          <strong>–ó–∞–∫–∞–∑—á–∏–∫:</strong> {project.customer}
        </div>
      )}
      
      {/* –°—É–º–º–∞ */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        marginBottom: 4
      }}>
        <span style={{ 
          color: '#222', 
          fontWeight: 700, 
          fontSize: 16 
        }}>
          –°—É–º–º–∞:
        </span>
        <span style={{ 
          color: '#222', 
          fontWeight: 700, 
          fontSize: 16 
        }}>
          {typeof project.price === 'number' 
            ? project.price.toLocaleString('ru-RU') 
            : 0} ‚Çæ
        </span>
      </div>
      
      {/* –î–∞—Ç–∞ */}
      <div style={{ 
        color: '#888', 
        fontSize: 13
      }}>
        {new Date(project.createdAt).toLocaleString('ru-RU')}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥—Ä–æ–ø–∑–æ–Ω—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
interface DroppableStatusProps {
  status: Status;
  projects: Project[];
  onProjectEdit?: (project: Project) => void;
  onProjectMove?: (projectId: string, targetStatusId: string, statusName: string, insertPosition?: number) => Promise<void>;
  isDesktop?: boolean;
  isDragActive?: boolean;
  onSetDragActive?: (active: boolean) => void;
  statuses: Status[];
  insertionPosition?: {statusId: string; position: number} | null;
  projectsByStatus?: Record<string, Project[]>;
  onInsertionPositionChange?: (position: {statusId: string; position: number} | null) => void;
}

const DroppableStatus: React.FC<DroppableStatusProps> = ({ 
  status, 
  projects, 
  onProjectEdit,
  onProjectMove,
  isDesktop = true,
  isDragActive = false,
  onSetDragActive,
  statuses,
  insertionPosition,
  projectsByStatus = {},
  onInsertionPositionChange
}) => {
  const projectIds = projects.map(p => p._id);
  const [isHovered, setIsHovered] = React.useState(false);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º useDroppable –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–æ–ø–∑–æ–Ω—ã
  const { isOver, setNodeRef } = useDroppable({
    id: status._id,
  });

  const containerStyle = isDesktop ? {
    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
    flex: `0 0 ${window.innerWidth >= 1400 ? '320px' : window.innerWidth >= 1200 ? '280px' : '250px'}`,
    width: window.innerWidth >= 1400 ? '320px' : window.innerWidth >= 1200 ? '280px' : '250px',
    minWidth: window.innerWidth >= 1400 ? '320px' : window.innerWidth >= 1200 ? '280px' : '250px',
    background: '#f8f9fa',
    borderRadius: 12,
    padding: 8,
    height: '100%',
    minHeight: '200px',
    maxHeight: 'none',
    display: 'flex',
    flexDirection: 'column' as const,
    overflow: 'hidden',
    border: '2px solid #e0e0e0'
  } : {
    background: '#f8f9fa',
    borderRadius: 12,
    padding: 12,
    width: '100%',
    boxSizing: 'border-box' as const,
    minHeight: 'calc(100vh - 320px)',
    maxHeight: 'calc(100vh - 320px)',
    overflowY: 'auto' as const,
    border: '2px solid #e0e0e0'
  };

  // console.log('üèóÔ∏è Creating DroppableStatus for:', status.name, 'with ID:', status._id);
  
  return (
    <div 
      ref={setNodeRef}
      className="kanban-column"
      data-status-id={status._id}
      data-status-name={status.name}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      style={{
        ...containerStyle,
        background: isOver 
          ? 'linear-gradient(135deg, #bbdefb 0%, #90caf9 100%)' 
          : isHovered 
            ? '#f8f9fa' 
            : containerStyle.background,
        border: isOver ? '4px dashed #2196f3' : undefined, // –û—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É
        transform: isOver ? 'scale(1.05)' : 'scale(1)',
        boxShadow: isOver 
          ? '0 8px 24px rgba(33, 150, 243, 0.3)' 
          : 'none',
        transition: 'all 0.2s ease',
      }}
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ */}
      {isDesktop && (
      <div style={{ 
        display: 'flex', 
        alignItems: 'center', 
        marginBottom: 16,
        paddingBottom: 12,
        flexShrink: 0
      }}>
        <div 
          style={{ 
            width: 12, 
            height: 12, 
            borderRadius: 6, 
            background: status.color,
            marginRight: 8 
          }} 
        />
        <h3 style={{ 
          fontSize: 16, 
          fontWeight: 600, 
          margin: 0,
          color: '#000'
        }}>
          {status.name}
        </h3>
        <span style={{ 
          marginLeft: 'auto',
          background: '#e0e0e0',
          borderRadius: 12,
          padding: '4px 8px',
          fontSize: 12,
          color: '#666'
        }}>
          {projects.length}
        </span>
      </div>
      )}

            {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º spacing */}
      <div style={{
        flex: 1,
        overflowY: isDesktop ? 'auto' : 'visible',
        minHeight: 0,
        padding: isDesktop ? 4 : '12px 0 0 0',
      }}>
        <SortableContext items={projectIds} strategy={verticalListSortingStrategy}>
          {projects.map((project, index) => (
            <SortableProject
              key={project._id}
              project={project}
              onEdit={onProjectEdit}
              onProjectMove={onProjectMove}
              isDragActive={isDragActive}
              onSetDragActive={onSetDragActive}
              statuses={statuses}
              projectIndex={index}
              statusId={status._id}
              insertionPosition={insertionPosition}
              projectsByStatus={projectsByStatus}
              onInsertionPositionChange={onInsertionPositionChange}
            />
          ))}
        </SortableContext>
      </div>
    </div>
  );
};

const KanbanBoard: React.FC<KanbanBoardProps> = ({ 
  companyId, 
  onProjectEdit,
  onProjectDelete: _onProjectDelete, // eslint-disable-line @typescript-eslint/no-unused-vars
  searchTerm = '',
  dateFilter = 'all',
  customDateFrom = '',
  customDateTo = ''
}) => {
  // –ü–†–û–°–¢–ê–Ø –û–¢–õ–ê–î–ö–ê –î–õ–Ø –ü–†–û–í–ï–†–ö–ò (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞)
  // console.log('üî• KanbanBoard RENDERING at:', new Date().toISOString());
  
  // –û—Ç–ª–∞–¥–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–∞)
  // React.useEffect(() => {
  //   console.log('üèóÔ∏è KanbanBoard mounted/remounted at:', new Date().toISOString());
  //   return () => {
  //     console.log('üí• KanbanBoard unmounting at:', new Date().toISOString());
  //   };
  // }, []);
  
  const [statuses, setStatuses] = useState<Status[]>([]);
  const [projects, setProjects] = useState<Project[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
  const [selectedStatusIndex, setSelectedStatusIndex] = useState(0);
  const [showStatusMenu, setShowStatusMenu] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è drag overlay
  const [activeProject, setActiveProject] = useState<Project | null>(null);
  const [isDragActive, setIsDragActive] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤—Å—Ç–∞–≤–∫–∏
  const [insertionPosition, setInsertionPosition] = useState<{statusId: string; position: number} | null>(null);
  
  // –û—Ç–ª–∞–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π insertionPosition (—É–±—Ä–∞–Ω–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏)
  // React.useEffect(() => {
  //   console.log('üîÑ insertionPosition changed:', insertionPosition);
  // }, [insertionPosition]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥—Ä–∞–≥–∞
  const handleSetDragActive = (active: boolean) => {
    setIsDragActive(active);
  };

  // –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
  const filterProjects = (projects: Project[]): Project[] => {
    let filtered = projects;

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if (searchTerm.trim()) {
      const search = searchTerm.trim().toLowerCase();
      filtered = filtered.filter(project => {
        const nameMatch = project.name && project.name.toLowerCase().includes(search);
        const customerMatch = project.customer && project.customer.toLowerCase().includes(search);
        return nameMatch || customerMatch;
      });
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    if (dateFilter !== 'all') {
      const now = new Date();
      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      
      filtered = filtered.filter(project => {
        const projectDate = new Date(project.createdAt);
        
        switch (dateFilter) {
          case 'today':
            return projectDate >= today;
          case 'week': {
            const weekAgo = new Date(today);
            weekAgo.setDate(today.getDate() - 7);
            return projectDate >= weekAgo;
          }
          case 'month': {
            const monthAgo = new Date(today);
            monthAgo.setMonth(today.getMonth() - 1);
            return projectDate >= monthAgo;
          }
          case 'custom': {
            if (customDateFrom && customDateTo) {
              const fromDate = new Date(customDateFrom);
              const toDate = new Date(customDateTo);
              toDate.setHours(23, 59, 59, 999); // –≤–∫–ª—é—á–∞–µ–º –≤–µ—Å—å –¥–µ–Ω—å
              return projectDate >= fromDate && projectDate <= toDate;
            }
            return true;
          }
          default:
            return true;
        }
      });
    }

    return filtered;
  };

  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–Ω—Å–æ—Ä–æ–≤
  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    })
  );

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (showStatusMenu && !(event.target as Element).closest('.status-menu')) {
        setShowStatusMenu(false);
      }
    };

    if (showStatusMenu) {
      document.addEventListener('mousedown', handleClickOutside);
      return () => document.removeEventListener('mousedown', handleClickOutside);
    }
  }, [showStatusMenu]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏ –ø—Ä–æ–µ–∫—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const [statusesData, projectsData] = await Promise.all([
          getStatuses(companyId),
          getProjects({ companyId })
        ]);
        
        setStatuses(statusesData);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ProjectApiResponse –≤ Project
        const mappedProjects: Project[] = projectsData.map((project: ProjectApiResponse) => ({
          _id: project._id,
          name: project.name,
          customer: project.customer,
          status: project.statusId?.name || project.status,
          statusId: project.statusId,
          price: project.price,
          priceHistory: project.priceHistory,
          statusHistory: project.statusHistory,
          createdAt: project.createdAt,
          updatedAt: project.updatedAt,
          data: project.data
        }));
        
        setProjects(mappedProjects);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
        setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      } finally {
        setLoading(false);
      }
    };
    
    if (companyId) {
      loadData();
    } else {
      setLoading(false);
    }
  }, [companyId]);

  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ ID —Å—Ç–∞—Ç—É—Å–æ–≤ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const projectsByStatus = React.useMemo(() => {
    const byStatus: Record<string, Project[]> = {};
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
    const filteredProjects = filterProjects(projects);
    
    statuses.forEach(status => {
      const statusProjects = filteredProjects.filter(project => 
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ statusId._id –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞
        project.statusId?._id === status._id || 
        (project.status === status.name && !project.statusId)
      );
      byStatus[status._id] = statusProjects;
    });
    return byStatus;
  }, [projects, statuses, searchTerm, dateFilter, customDateFrom, customDateTo]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
  const handleProjectMove = async (projectId: string, targetStatusId: string, statusName: string, insertPosition?: number) => {
    try {
      // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const targetStatus = statuses.find(s => s._id === targetStatusId);
      if (!targetStatus) {
        throw new Error('–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç–∫–∞—Ç—ã–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      const originalProject = projects.find(p => p._id === projectId);
      if (!originalProject) {
        throw new Error('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø–æ–∑–∏—Ü–∏–∏
      setProjects(prev => {
        console.log('üîß UPDATING PROJECTS STATE:', {
          projectId,
          targetStatusId,
          insertPosition,
          originalStatus: originalProject.statusId?._id
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ–µ–∫—Ç–∞
        const updatedProject = {
          ...originalProject,
          status: targetStatus.name,
          statusId: {
            _id: targetStatus._id,
            name: targetStatus.name,
            color: targetStatus.color,
            order: targetStatus.order
          }
        };

        // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if (insertPosition === undefined) {
          const withoutProject = prev.filter(p => p._id !== projectId);
          return [...withoutProject, updatedProject];
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –ª–∏ –≤ —Ç–æ–º –∂–µ —Å—Ç–∞—Ç—É—Å–µ
        const isSameStatus = originalProject.statusId?._id === targetStatusId;
        
        if (isSameStatus) {
          // –í–Ω—É—Ç—Ä–∏ —Ç–æ–≥–æ –∂–µ —Å—Ç–∞—Ç—É—Å–∞ - –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
          const result = [...prev];
          const currentIndex = result.findIndex(p => p._id === projectId);
          
          if (currentIndex !== -1) {
            // –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            result.splice(currentIndex, 1);
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ —É–¥–∞–ª—è–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –Ω–µ–π
            let adjustedPosition = insertPosition;
            if (currentIndex < insertPosition) {
              adjustedPosition = insertPosition - 1;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Ü–µ–ª–µ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ (–±–µ–∑ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞)
            const statusProjects = result.filter(p => 
              p.statusId?._id === targetStatusId || 
              (p.status === targetStatus.name && !p.statusId)
            );
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            adjustedPosition = Math.max(0, Math.min(adjustedPosition, statusProjects.length));
            
            console.log('üìç SAME STATUS MOVE:', {
              currentIndex,
              originalPosition: insertPosition,
              adjustedPosition,
              statusProjectsCount: statusProjects.length
            });
            
            // –ù–∞—Ö–æ–¥–∏–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            const otherProjects = result.filter(p => 
              p.statusId?._id !== targetStatusId && 
              !(p.status === targetStatus.name && !p.statusId)
            );
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
            const targetProjects = [...statusProjects];
            targetProjects.splice(adjustedPosition, 0, updatedProject);
            
            return [...otherProjects, ...targetProjects];
          }
          
          return prev;
        } else {
          // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å
          const withoutProject = prev.filter(p => p._id !== projectId);
          
          // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
          const targetStatusProjects = withoutProject.filter(p => 
            p.statusId?._id === targetStatusId || 
            (p.status === targetStatus.name && !p.statusId)
          );
          
          // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
          const otherStatusProjects = withoutProject.filter(p => 
            p.statusId?._id !== targetStatusId && 
            !(p.status === targetStatus.name && !p.statusId)
          );

          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
          const safePosition = Math.max(0, Math.min(insertPosition, targetStatusProjects.length));
          
          console.log('üìç DIFFERENT STATUS MOVE:', {
            originalPosition: insertPosition,
            safePosition,
            targetProjectsCount: targetStatusProjects.length
          });

          // –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
          const newTargetProjects = [...targetStatusProjects];
          newTargetProjects.splice(safePosition, 0, updatedProject);

          return [...otherStatusProjects, ...newTargetProjects];
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await updateProjectStatus(projectId, targetStatusId);
      console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å ${statusName}${insertPosition !== undefined ? ` –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${insertPosition}` : ''}`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞)
      // console.log('üéØ FINAL PROJECTS STATE:', {
      //   allProjects: projects.map(p => ({ id: p._id, name: p.name, status: p.statusId?.name || p.status })),
      //   targetStatusProjects: projects
      //     .filter(p => p.statusId?._id === targetStatusId || (p.status === statusName && !p.statusId))
      //     .map(p => ({ id: p._id, name: p.name }))
      // });
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', err);
      
      // –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç–∫–∞—Ç–∞
      const originalProject = projects.find(p => p._id === projectId);
      
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (originalProject) {
        setProjects(prev =>
          prev.map(p =>
            p._id === projectId 
              ? originalProject
              : p
          )
        );
      }
      
      throw err; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ UI
    }
  };

  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ DndContext –≤–æ–æ–±—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
  const handleDragStart = (event: DragStartEvent) => {
    console.log('üéâ SUCCESS! DRAG STARTED!', event);
    const { active } = event;
    const project = projects.find(p => p._id === active.id);
    setActiveProject(project || null);
    setIsDragActive(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—Ä–∞–≥–∞
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä grabbing –Ω–∞ –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç
    document.body.style.cursor = 'grabbing';
    document.body.style.userSelect = 'none';
    document.body.classList.add('dragging-active');
    
    console.log('Project found:', project?.name);
  };

      const handleDragOver = (event: DragOverEvent) => {
    const { over } = event;
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (over && over.id && typeof over.id === 'string') {
      const statusId = over.id;
      const statusProjects = projectsByStatus[statusId] || [];
      
      // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Å–µ—Ä–µ–¥–∏–Ω–∞
      const insertPosition = Math.floor(statusProjects.length / 2);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –ø–æ–∑–∏—Ü–∏—è
      const currentPosition = insertionPosition;
      const isPositionChanged = !currentPosition || 
        currentPosition.statusId !== statusId || 
        currentPosition.position !== insertPosition;
      
      if (isPositionChanged) {
        console.log('üéØ INSERTION POSITION CHANGED:', { 
          from: currentPosition,
          to: { statusId, position: insertPosition },
          totalProjects: statusProjects.length 
        });
        setInsertionPosition({ statusId, position: insertPosition });
      }
    } else {
      if (insertionPosition) {
        console.log('üö´ CLEARING INSERTION POSITION');
        setInsertionPosition(null);
      }
    }
  };

  const handleDragEnd = async (event: DragEndEvent) => {
    const { active, over } = event;
    
    console.log('üèÅ Drag end:', {
      activeId: active.id,
      overId: over?.id,
      hasTarget: !!over
    });
    
    setActiveProject(null);
    setIsDragActive(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—Ä–∞–≥–∞
    setInsertionPosition(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    document.body.style.cursor = '';
    document.body.style.userSelect = '';
    document.body.classList.remove('dragging-active');
    
    if (!over) {
      console.log('‚ùå No drop target');
      return;
    }

    const projectId = active.id as string;
    const dropTargetId = over.id as string;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º insertPosition –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ drop –Ω–∞ —Å—Ç–∞—Ç—É—Å —Ü–µ–ª–∏–∫–æ–º
    const targetStatusId = dropTargetId;
    const insertPosition = insertionPosition?.statusId === targetStatusId ? insertionPosition.position : undefined;
    
    console.log('üìç Drop details:', { 
      targetStatusId, 
      insertPosition, 
      hasInsertionState: !!insertionPosition 
    });
    
    // –ù–∞–π—Ç–∏ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞—Ç—É—Å
    const targetStatus = statuses.find(status => String(status._id) === targetStatusId);
    if (!targetStatus) {
      console.error('‚ùå Target status not found:', targetStatusId);
      return;
    }

    // –ù–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç
    const project = projects.find(p => p._id === projectId);
    if (!project) {
      console.error('‚ùå Project not found:', projectId);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ –º–µ–Ω—è—Ç—å
    const isSameStatus = project.statusId?._id === targetStatusId;
    const currentStatusProjects = projectsByStatus[targetStatusId] || [];
    const currentPosition = currentStatusProjects.findIndex(p => p._id === projectId);
    
    if (isSameStatus && insertPosition === undefined) {
      console.log('‚ùå Same status, no position specified, no change needed');
      return;
    }
    
    if (isSameStatus && insertPosition === currentPosition) {
      console.log('‚ùå Same position in same status, no change needed');
      return;
    }

    console.log('üîÑ Moving project:', project.name, 'to status:', targetStatus.name, 'at position:', insertPosition);
    
    try {
      await handleProjectMove(projectId, targetStatusId, targetStatus.name, insertPosition);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç');
      setTimeout(() => setError(null), 3000);
    }
  };

  if (loading) {
    return (
      <div style={{ padding: 40, textAlign: 'center' }}>
        <div style={{ color: '#666' }}>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div style={{ padding: 40, textAlign: 'center' }}>
        <div style={{ color: '#d32f2f' }}>–û—à–∏–±–∫–∞: {error}</div>
      </div>
    );
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  const renderMobileView = () => (
    <DndContext
      sensors={sensors}
      collisionDetection={closestCenter}
      onDragStart={handleDragStart}
      onDragOver={handleDragOver}
      onDragEnd={handleDragEnd}
    >
      <div style={{ 
        padding: '8px', 
        height: '100%', 
        width: '100%',
        boxSizing: 'border-box',
        overflow: 'visible'
      }}>
        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
        {error && (
          <div style={{
            background: '#ffebee',
            border: '1px solid #f44336',
            borderRadius: 8,
            padding: 12,
            marginBottom: 16,
            color: '#d32f2f',
            fontSize: 14
          }}>
            ‚ö†Ô∏è {error}
          </div>
        )}

        {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –º–æ–±–∞–π–ª–∞ */}
        <div className="status-menu" style={{ marginBottom: 16, position: 'relative' }}>
          <button
            onClick={() => setShowStatusMenu(!showStatusMenu)}
            style={{
              width: '100%',
              padding: '12px 16px',
              background: '#f8f9fa',
              border: '1px solid #e0e0e0',
              borderRadius: 8,
              fontSize: 14,
              fontWeight: 600,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              cursor: 'pointer'
            }}
          >
            <span style={{ display: 'flex', alignItems: 'center', color: '#000' }}>
              <div 
                style={{ 
                  width: 12, 
                  height: 12, 
                  borderRadius: 6, 
                  background: statuses[selectedStatusIndex]?.color || '#ccc',
                  marginRight: 8 
                }} 
              />
              <span style={{ color: '#000' }}>
                {statuses[selectedStatusIndex]?.name || '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å'}
              </span>
            </span>
            <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
              <span style={{ 
                background: '#e0e0e0',
                borderRadius: 12,
                padding: '2px 6px',
                fontSize: 11,
                color: '#000'
              }}>
                {projectsByStatus[statuses[selectedStatusIndex]?._id]?.length || 0}
            </span>
            <span style={{ fontSize: 12 }}>{showStatusMenu ? '‚ñ≤' : '‚ñº'}</span>
            </div>
          </button>

          {showStatusMenu && (
            <div style={{
              position: 'absolute',
              top: '100%',
              left: 0,
              right: 0,
              background: '#fff',
              border: '1px solid #e0e0e0',
              borderRadius: 8,
              boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
              zIndex: 1000,
              maxHeight: Math.min(
                statuses.length * 48 + 16,
                Math.max(window.innerHeight - 280, 200)
              ),
              overflowY: statuses.length * 48 + 16 > window.innerHeight - 280 ? 'auto' : 'visible'
            }}>
              {statuses.map((status, index) => (
                <div
                  key={status._id}
                  onClick={() => {
                    setSelectedStatusIndex(index);
                    setShowStatusMenu(false);
                  }}
                  style={{
                    padding: '12px 16px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    cursor: 'pointer',
                    background: index === selectedStatusIndex ? '#f0f8ff' : 'transparent',
                    borderBottom: index < statuses.length - 1 ? '1px solid #f0f0f0' : 'none'
                  }}
                >
                  <span style={{ display: 'flex', alignItems: 'center', color: '#000' }}>
                    <div 
                      style={{ 
                        width: 12, 
                        height: 12, 
                        borderRadius: 6, 
                        background: status.color,
                        marginRight: 8 
                      }} 
                    />
                    <span style={{ color: '#000' }}>
                      {status.name}
                    </span>
                  </span>
                  <span style={{ 
                    background: '#e0e0e0',
                    borderRadius: 12,
                    padding: '2px 6px',
                    fontSize: 11,
                    color: '#000'
                  }}>
                    {projectsByStatus[status._id]?.length || 0}
                  </span>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* –û–¥–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ */}
        {statuses[selectedStatusIndex] && (
          <DroppableStatus 
            status={statuses[selectedStatusIndex]}
            projects={projectsByStatus[statuses[selectedStatusIndex]._id] || []}
            onProjectEdit={onProjectEdit}
            onProjectMove={handleProjectMove}
            isDesktop={false}
            isDragActive={isDragActive}
            onSetDragActive={handleSetDragActive}
            statuses={statuses}
            insertionPosition={insertionPosition}
            projectsByStatus={projectsByStatus}
            onInsertionPositionChange={setInsertionPosition}
          />
        )}
      </div>
      
      <DragOverlay>
        {activeProject ? <ProjectCard project={activeProject} isOverlay /> : null}
      </DragOverlay>
    </DndContext>
  );

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  const renderDesktopView = () => (
    <DndContext
      sensors={sensors}
      collisionDetection={closestCenter}
      onDragStart={handleDragStart}
      onDragOver={handleDragOver}
      onDragEnd={handleDragEnd}
    >
      <div className="kanban-container" style={{ 
        padding: '0px 8px 16px 8px',
        height: '100%', 
        position: 'relative',
        minHeight: '100%',
        width: '100%',
        boxSizing: 'border-box'

      }}>
        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
        {error && (
          <div style={{
            background: '#ffebee',
            border: '1px solid #f44336',
            borderRadius: 8,
            padding: 12,
            marginBottom: 16,
            color: '#d32f2f',
            fontSize: 14
          }}>
            ‚ö†Ô∏è {error}
          </div>
        )}
        
        <div 
          className="kanban-board kanban-grid"
          style={{ 
            display: 'flex',
            overflowX: 'auto',
            overflowY: 'hidden',
            gap: 8,
            paddingBottom: 16,
            minHeight: '200px',
            height: '100%',
            width: '100%',
            scrollbarWidth: 'thin',
            scrollbarColor: '#c1c1c1 #f1f1f1',

          }}
        >
          {statuses.map(status => (
            <DroppableStatus 
              key={status._id}
              status={status}
              projects={projectsByStatus[status._id] || []}
              onProjectEdit={onProjectEdit}
              onProjectMove={handleProjectMove}
              isDesktop={true}
              isDragActive={isDragActive}
              onSetDragActive={handleSetDragActive}
              statuses={statuses}
              insertionPosition={insertionPosition}
              projectsByStatus={projectsByStatus}
              onInsertionPositionChange={setInsertionPosition}
            />
          ))}
        </div>
      </div>
      
      <DragOverlay>
        {activeProject ? <ProjectCard project={activeProject} isOverlay /> : null}
      </DragOverlay>
    </DndContext>
  );

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–µ—Ä—Å–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
  return (
    <>
      {isMobile ? renderMobileView() : renderDesktopView()}
      {/* CSS —Å—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ */}
      <style>{`
        /* –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ */
        .kanban-board::-webkit-scrollbar {
          height: 8px;
        }
        .kanban-board::-webkit-scrollbar-track {
          background: transparent;
        }
        .kanban-board::-webkit-scrollbar-thumb {
          background: #c1c1c1;
          border-radius: 4px;
        }
        .kanban-board::-webkit-scrollbar-thumb:hover {
          background: #a1a1a1;
        }
        
        /* –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∫—É—Ä—Å–æ—Ä –≤–æ –≤—Ä–µ–º—è –¥—Ä–∞–≥–∞ */
        body.dragging-active,
        body.dragging-active *,
        body.dragging-active *:hover {
          cursor: grabbing !important;
          user-select: none !important;
        }
        
        /* –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏ –¥—Ä–∞–≥–µ */
        .kanban-column.drag-highlight {
          background: linear-gradient(135deg, #c8e6c9 0%, #a5d6a7 100%) !important;
          transition: background 0.2s ease !important;
        }

        /* –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è kanban-–∫–æ–ª–æ–Ω–æ–∫ */
        .kanban-container {
          overflow: visible !important;
          padding-top: 0px !important;
          margin-top: 0px !important;
        }
        
        /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è grid */
        .kanban-grid {
          overflow: visible !important;
        }
        
        /* –ú–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ */
        @media (max-width: 768px) {
          .status-menu span,
          .status-menu div,
          .kanban-column h3,
          .kanban-column span {
            color: #000 !important;
          }
          
          .status-menu button {
            color: #000 !important;
          }
          
          .status-menu div[style*="background"] {
            color: #000 !important;
          }
          
          /* –ú–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ */
          body {
            overflow-x: hidden !important;
          }
          
          .kanban-column {
            width: 100% !important;
            box-sizing: border-box !important;
            margin: 0 !important;
            /* –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–æ–ª–ª –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
            overflow-y: auto !important;
            -webkit-overflow-scrolling: touch !important;
          }
          
          /* –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è touch –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è */
          .kanban-column > div:last-child {
            /* –û–±–ª–∞—Å—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ä—Ç–æ—á–µ–∫ */
            overflow-y: auto !important;
            -webkit-overflow-scrolling: touch !important;
            overscroll-behavior: contain !important;
          }
          
          /* –ö–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */
          [data-project-id] {
            /* –ü–æ–∑–≤–æ–ª—è–µ–º —Å–∫—Ä–æ–ª–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ drag mode */
            touch-action: auto !important;
          }
          
          [data-project-id][data-drag-mode="true"] {
            /* –í drag mode –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ touch —Å–æ–±—ã—Ç–∏—è */
            touch-action: none !important;
          }
        }
      `}</style>
    </>
  );
};

export default KanbanBoard; 