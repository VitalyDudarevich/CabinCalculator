const Setting = require('../models/Setting');

exports.getAllSettings = async (req, res) => {
  try {
    const { companyId } = req.query;

    console.log('‚öôÔ∏è getAllSettings called with:', {
      companyId,
      userRole: req.user?.role,
      userCompanyId: req.user?.companyId,
      hasCompanyId: !!req.user?.companyId,
    });

    // üîß –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê (–∫–∞–∫ –≤ hardwareController)
    const userCompanyId = req.user?.companyId;
    const queryCompanyId = req.query.companyId;
    const finalCompanyId = queryCompanyId || userCompanyId;

    console.log('üîß –£–ü–†–û–©–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê SETTINGS:', {
      userCompanyId,
      queryCompanyId,
      finalCompanyId,
      userRole: req.user?.role,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (req.user.role === 'superadmin') {
      console.log('‚úÖ Settings: Superadmin access - allowed for any company');
      // –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª—é–±–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
      if (finalCompanyId) {
        const setting = await Setting.findOne({ companyId: finalCompanyId });
        return res.json(setting ? [setting] : []);
      } else {
        const settings = await Setting.find();
        return res.json(settings);
      }
    }

    // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (req.user.role === 'admin' || req.user.role === 'user') {
      console.log('‚úÖ Settings: User/Admin access with finalCompanyId:', finalCompanyId);

      if (!finalCompanyId) {
        console.log('‚ùå Settings: No companyId available');
        return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫' });
      }

      console.log('‚úÖ Settings: Loading settings for company:', finalCompanyId);
      const setting = await Setting.findOne({ companyId: finalCompanyId });
      return res.json(setting ? [setting] : []);
    }

    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å
    console.log('‚ùå Settings: Unknown user role');
    return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
  } catch (err) {
    console.error('‚ùå Error in getAllSettings:', err);
    res.status(500).json({ error: err.message });
  }
};

exports.getSettingById = async (req, res) => {
  try {
    const setting = await Setting.findById(req.params.id);
    if (!setting) return res.status(404).json({ error: 'Setting not found' });
    res.json(setting);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.createSetting = async (req, res) => {
  try {
    const { companyId } = req.body;

    console.log('‚öôÔ∏è createSetting called with:', {
      companyId,
      userRole: req.user?.role,
      userCompanyId: req.user?.companyId,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (req.user.role === 'superadmin') {
      // –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—é–±–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
      console.log('‚úÖ Settings create: Superadmin access - allowed for any company');
    } else if (req.user.role === 'admin') {
      // –ê–¥–º–∏–Ω—ã –±–µ–∑ companyId –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—é–±—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
      // –ê–¥–º–∏–Ω—ã —Å companyId –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
      if (!req.user.companyId) {
        console.log('‚úÖ Settings create: Admin without companyId - allowed for any company');
        // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
      } else {
        // –ê–¥–º–∏–Ω —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        let userCompanyId =
          typeof req.user.companyId === 'object'
            ? req.user.companyId._id?.toString() || req.user.companyId.toString()
            : req.user.companyId.toString();

        console.log('üîç Admin Company ID comparison for create:', {
          userCompanyId,
          requestedCompanyId: companyId,
          match: companyId === userCompanyId,
        });

        if (companyId !== userCompanyId) {
          console.log('‚ùå Settings create: Admin access denied to company', companyId);
          return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏' });
        }
      }
    } else if (req.user.role === 'user') {
      // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å companyId –∏ –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
      let userCompanyId;

      if (req.user.companyId) {
        userCompanyId =
          typeof req.user.companyId === 'object'
            ? req.user.companyId._id?.toString() || req.user.companyId.toString()
            : req.user.companyId.toString();
      }

      if (!userCompanyId) {
        console.log('‚ùå Settings create: User has no access to any company');
        return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫' });
      }

      console.log('üîç User Company ID comparison for create:', {
        userCompanyId,
        requestedCompanyId: companyId,
        match: companyId === userCompanyId,
      });

      if (companyId !== userCompanyId) {
        console.log('‚ùå Settings create: User access denied to company', companyId);
        return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏' });
      }
    } else {
      console.log('‚ùå Settings create: Unknown user role');
      return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
    }

    let setting = await Setting.findOne({ companyId });
    if (setting) {
      // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
      setting.set({
        ...req.body,
        baseIsPercent: req.body.baseIsPercent ?? false,
        basePercentValue: req.body.basePercentValue ?? 0,
        customColorSurcharge: req.body.customColorSurcharge ?? 0,
        baseCostMode: req.body.baseCostMode ?? 'fixed',
        baseCostPercentage: req.body.baseCostPercentage ?? 0,
      });
      await setting.save();
      res.status(200).json(setting);
    } else {
      // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
      setting = new Setting({
        ...req.body,
        baseIsPercent: req.body.baseIsPercent ?? false,
        basePercentValue: req.body.basePercentValue ?? 0,
        customColorSurcharge: req.body.customColorSurcharge ?? 0,
        baseCostMode: req.body.baseCostMode ?? 'fixed',
        baseCostPercentage: req.body.baseCostPercentage ?? 0,
      });
      await setting.save();
      res.status(201).json(setting);
    }
  } catch (err) {
    console.error('‚ùå Error in createSetting:', err);
    res.status(400).json({ error: err.message });
  }
};

exports.updateSetting = async (req, res) => {
  try {
    console.log('‚öôÔ∏è updateSetting called with:', {
      settingId: req.params.id,
      userRole: req.user?.role,
      userCompanyId: req.user?.companyId,
      userCompanyIdType: typeof req.user?.companyId,
      userCompanyIdValue: req.user?.companyId,
    });

    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å companyId
    const existingSetting = await Setting.findById(req.params.id);
    if (!existingSetting) {
      return res.status(404).json({ error: 'Setting not found' });
    }

    console.log('üìÑ Found setting:', {
      settingId: existingSetting._id,
      settingCompanyId: existingSetting.companyId,
      settingCompanyIdType: typeof existingSetting.companyId,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (req.user.role === 'superadmin') {
      // –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª—é–±–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
      console.log('‚úÖ Settings update: Superadmin access - allowed for any company');
    } else if (req.user.role === 'admin') {
      // –ê–¥–º–∏–Ω—ã –±–µ–∑ companyId –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª—é–±—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
      // –ê–¥–º–∏–Ω—ã —Å companyId –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
      if (!req.user.companyId) {
        console.log('‚úÖ Settings update: Admin without companyId - allowed for any company');
        // –†–∞–∑—Ä–µ—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
      } else {
        // –ê–¥–º–∏–Ω —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        let userCompanyId =
          typeof req.user.companyId === 'object'
            ? req.user.companyId._id?.toString() || req.user.companyId.toString()
            : req.user.companyId.toString();

        const settingCompanyId = existingSetting.companyId.toString();

        console.log('üîç Admin Company ID comparison:', {
          userCompanyId,
          settingCompanyId,
          match: userCompanyId === settingCompanyId,
        });

        if (settingCompanyId !== userCompanyId) {
          console.log('‚ùå Settings update: Admin access denied to company', settingCompanyId);
          return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏' });
        }
      }
    } else if (req.user.role === 'user') {
      // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å companyId –∏ –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
      let userCompanyId;

      if (req.user.companyId) {
        userCompanyId =
          typeof req.user.companyId === 'object'
            ? req.user.companyId._id?.toString() || req.user.companyId.toString()
            : req.user.companyId.toString();
      }

      if (!userCompanyId) {
        console.log('‚ùå Settings update: User has no access to any company');
        return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫' });
      }

      const settingCompanyId = existingSetting.companyId.toString();

      console.log('üîç User Company ID comparison:', {
        userCompanyId,
        settingCompanyId,
        match: userCompanyId === settingCompanyId,
      });

      if (settingCompanyId !== userCompanyId) {
        console.log('‚ùå Settings update: User access denied to company', settingCompanyId);
        return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏' });
      }
    } else {
      console.log('‚ùå Settings update: Unknown user role');
      return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
    }

    const update = {
      ...req.body,
    };
    if (!('baseIsPercent' in update)) update.baseIsPercent = false;
    if (!('basePercentValue' in update)) update.basePercentValue = 0;
    if (!('customColorSurcharge' in update)) update.customColorSurcharge = 0;
    if (!('baseCostMode' in update)) update.baseCostMode = 'fixed';
    if (!('baseCostPercentage' in update)) update.baseCostPercentage = 0;
    const setting = await Setting.findByIdAndUpdate(req.params.id, update, {
      new: true,
      runValidators: true,
    });
    if (!setting) return res.status(404).json({ error: 'Setting not found' });
    res.json(setting);
  } catch (err) {
    console.error('‚ùå Error in updateSetting:', err);
    res.status(400).json({ error: err.message });
  }
};

exports.deleteSetting = async (req, res) => {
  try {
    const setting = await Setting.findByIdAndDelete(req.params.id);
    if (!setting) return res.status(404).json({ error: 'Setting not found' });
    res.json({ message: 'Setting deleted' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};
