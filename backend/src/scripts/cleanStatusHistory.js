const mongoose = require('mongoose');
const Project = require('../models/Project');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/calculator', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

async function cleanStatusHistory() {
  try {
    console.log('üîÑ Starting cleanup of statusHistory...');

    // –ù–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –≤ statusHistory –±–µ–∑ statusId
    const projects = await Project.find({
      'statusHistory.0': { $exists: true },
    });

    console.log(`üìä Found ${projects.length} projects with statusHistory`);

    let cleanedCount = 0;
    let errorCount = 0;

    for (const project of projects) {
      try {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –≥–¥–µ –µ—Å—Ç—å statusId
        const validStatusHistory = project.statusHistory.filter(
          (entry) => entry.statusId && mongoose.Types.ObjectId.isValid(entry.statusId),
        );

        const originalLength = project.statusHistory.length;
        const newLength = validStatusHistory.length;

        if (originalLength !== newLength) {
          console.log(
            `üìù Project ${project._id} (${project.name || 'Unnamed'}): removing ${originalLength - newLength} invalid entries`,
          );

          project.statusHistory = validStatusHistory;
          await project.save();
          cleanedCount++;
        }
      } catch (error) {
        console.error(`‚ùå Error processing project ${project._id}:`, error.message);
        errorCount++;
      }
    }

    console.log(`‚úÖ Cleanup completed:`);
    console.log(`   - Projects cleaned: ${cleanedCount}`);
    console.log(`   - Errors: ${errorCount}`);
    console.log(`   - Total projects processed: ${projects.length}`);
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
  } finally {
    mongoose.connection.close();
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
cleanStatusHistory();
