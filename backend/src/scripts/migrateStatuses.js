const mongoose = require('mongoose');
const Project = require('../models/Project');
const Status = require('../models/Status');
const Company = require('../models/Company');

const migrateStatuses = async () => {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤...');

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (mongoose.connection.readyState !== 1) {
      throw new Error(
        '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ app.js –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ MongoDB',
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏
    const companies = await Company.find({});
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: ${companies.length}`);

    if (companies.length === 0) {
      console.log('‚ö†Ô∏è –ö–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏...');

      // –°–æ–∑–¥–∞–µ–º "—Å–∏—Å—Ç–µ–º–Ω—É—é" –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ companyId
      const systemCompany = await Company.create({
        name: '–°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
        city: '–°–∏—Å—Ç–µ–º–∞',
        ownerName: '–°–∏—Å—Ç–µ–º–∞',
        ownerContact: 'system@system.com',
      });
      companies.push(systemCompany);
    }

    // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    const statusMappings = {};

    for (const company of companies) {
      console.log(`üìù –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: ${company.name}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
      const existingStatuses = await Status.find({ companyId: company._id });

      if (existingStatuses.length === 0) {
        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const statuses = await Status.createDefaultStatusesForCompany(company._id);

        // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ –∫ –Ω–æ–≤—ã–º ID
        const mapping = {};
        statuses.forEach((status) => {
          mapping[status.name] = status._id;
        });
        statusMappings[company._id.toString()] = mapping;

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${statuses.length} —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${company.name}`);
      } else {
        console.log(`‚è≠Ô∏è –°—Ç–∞—Ç—É—Å—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${company.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç`);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
        const mapping = {};
        existingStatuses.forEach((status) => {
          mapping[status.name] = status._id;
        });
        statusMappings[company._id.toString()] = mapping;
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    const projects = await Project.find({});
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: ${projects.length}`);

    let migratedCount = 0;
    let skippedCount = 0;

    for (const project of projects) {
      try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        let projectCompanyId = project.companyId;

        // –ï—Å–ª–∏ —É –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç companyId, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
        if (!projectCompanyId) {
          projectCompanyId = companies[0]._id;
          console.log(
            `‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç ${project._id} –±–µ–∑ companyId, –Ω–∞–∑–Ω–∞—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é: ${companies[0].name}`,
          );
        }

        const companyMapping = statusMappings[projectCompanyId.toString()];

        if (!companyMapping) {
          console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${projectCompanyId}`);
          skippedCount++;
          continue;
        }

        // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π statusId
        let statusId = companyMapping[project.status];

        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º "–†–∞—Å—Å—á–µ—Ç" –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!statusId) {
          statusId = companyMapping['–†–∞—Å—Å—á–µ—Ç'];
          console.log(
            `‚ö†Ô∏è –°—Ç–∞—Ç—É—Å "${project.status}" –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º "–†–∞—Å—Å—á–µ—Ç" –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${project._id}`,
          );
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
        await Project.findByIdAndUpdate(project._id, {
          statusId: statusId,
          companyId: projectCompanyId, // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–±–Ω–æ–≤–ª—è–µ–º companyId
        });

        migratedCount++;

        if (migratedCount % 100 === 0) {
          console.log(`üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${migratedCount}`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ ${project._id}:`, error.message);
        skippedCount++;
      }
    }

    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${migratedCount} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} –ø—Ä–æ–µ–∫—Ç–æ–≤`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for (const company of companies) {
      const statusCount = await Status.countDocuments({ companyId: company._id });
      const projectCount = await Project.countDocuments({ companyId: company._id });
      console.log(
        `üìä –ö–æ–º–ø–∞–Ω–∏—è "${company.name}": ${statusCount} —Å—Ç–∞—Ç—É—Å–æ–≤, ${projectCount} –ø—Ä–æ–µ–∫—Ç–æ–≤`,
      );
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  mongoose
    .connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/calculator', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    })
    .then(() => {
      console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      return migrateStatuses();
    })
    .then(() => {
      console.log('‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = migrateStatuses;
