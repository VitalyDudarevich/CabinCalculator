const mongoose = require('mongoose');
const dotenv = require('dotenv');
const Template = require('../models/Template');
const Company = require('../models/Company');

dotenv.config();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ (–∫–æ–ø–∏—è –∏–∑ companyController.js)
function createSystemTemplatesForCompany(companyId) {
  const systemTemplates = [
    {
      name: '–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ —Å—Ç–µ–∫–ª–æ',
      description: '–°–∏—Å—Ç–µ–º–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–≥–æ —Å—Ç–µ–∫–ª–∞',
      type: 'glass',
      isSystem: true,
      glassConfig: [{ name: '–°—Ç–µ–∫–ª–æ', type: 'stationary' }],
      sizeAdjustments: { doorHeightReduction: 8, thresholdReduction: 15 },
      fields: [],
      defaultHardware: ['–ü—Ä–æ—Ñ–∏–ª—å', '–°—Ç–µ–∫–ª–æ-—Å—Ç–µ–∫–ª–æ', '–°—Ç–µ–Ω–∞-—Å—Ç–µ–∫–ª–æ'],
      defaultServices: ['–î–æ—Å—Ç–∞–≤–∫–∞', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞'],
      customColorOption: false,
      exactHeightOption: false,
      defaultGlassColor: '–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π',
      defaultGlassThickness: '8',
      companyId,
      isActive: true,
    },
    {
      name: '–ü—Ä—è–º–∞—è —Ä–∞–∑–¥–≤–∏–∂–Ω–∞—è',
      description: '–°–∏—Å—Ç–µ–º–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä—è–º–æ–π —Ä–∞–∑–¥–≤–∏–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
      type: 'straight',
      isSystem: true,
      glassConfig: [
        { name: '–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä', type: 'stationary' },
        { name: '–î–≤–µ—Ä—å', type: 'sliding_door' },
      ],
      sizeAdjustments: { doorHeightReduction: 8, thresholdReduction: 15 },
      fields: [],
      defaultHardware: [
        '–ü—Ä–æ—Ñ–∏–ª—å',
        '–†–∞–∑–¥–≤–∏–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
        '–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è —Ç—Ä—É–±–∞ (—Ä–µ–ª—å—Å–∞)',
        '–°—Ç–µ–∫–ª–æ-—Å—Ç–µ–∫–ª–æ',
      ],
      defaultServices: ['–î–æ—Å—Ç–∞–≤–∫–∞', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞'],
      customColorOption: true,
      exactHeightOption: true,
      defaultGlassColor: '–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π',
      defaultGlassThickness: '8',
      companyId,
      isActive: true,
    },
    {
      name: '–£–≥–ª–æ–≤–∞—è —Ä–∞–∑–¥–≤–∏–∂–Ω–∞—è',
      description: '–°–∏—Å—Ç–µ–º–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —É–≥–ª–æ–≤–æ–π —Ä–∞–∑–¥–≤–∏–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
      type: 'corner',
      isSystem: true,
      glassConfig: [
        { name: '–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä 1', type: 'stationary' },
        { name: '–î–≤–µ—Ä—å 1', type: 'sliding_door' },
        { name: '–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä 2', type: 'stationary' },
        { name: '–î–≤–µ—Ä—å 2', type: 'sliding_door' },
      ],
      sizeAdjustments: { doorHeightReduction: 8, thresholdReduction: 15 },
      fields: [],
      defaultHardware: [
        '–ü—Ä–æ—Ñ–∏–ª—å',
        '–†–∞–∑–¥–≤–∏–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
        '–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è —Ç—Ä—É–±–∞ (—Ä–µ–ª—å—Å–∞)',
        '—É–≥–æ–ª–æ–∫ —Ç—É—Ä–±–∞-—Ç—Ä—É–±–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–µ',
      ],
      defaultServices: ['–î–æ—Å—Ç–∞–≤–∫–∞', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞'],
      customColorOption: true,
      exactHeightOption: true,
      defaultGlassColor: '–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π',
      defaultGlassThickness: '8',
      companyId,
      isActive: true,
    },
    {
      name: '–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
      description: '–°–∏—Å—Ç–µ–º–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π',
      type: 'unique',
      isSystem: true,
      glassConfig: [],
      sizeAdjustments: { doorHeightReduction: 8, thresholdReduction: 15 },
      fields: [],
      defaultHardware: ['–ü—Ä–æ—Ñ–∏–ª—å', '–°—Ç–µ–∫–ª–æ-—Å—Ç–µ–∫–ª–æ', '–°—Ç–µ–Ω–∞-—Å—Ç–µ–∫–ª–æ'],
      defaultServices: ['–î–æ—Å—Ç–∞–≤–∫–∞', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞'],
      customColorOption: true,
      exactHeightOption: false,
      defaultGlassColor: '–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π',
      defaultGlassThickness: '8',
      companyId,
      isActive: true,
    },
    {
      name: '–ü–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞',
      description: '–°–∏—Å—Ç–µ–º–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫',
      type: 'partition',
      isSystem: true,
      glassConfig: [{ name: '–°—Ç–µ–∫–ª–æ', type: 'stationary' }],
      sizeAdjustments: { doorHeightReduction: 8, thresholdReduction: 15 },
      fields: [],
      defaultHardware: ['–ü—Ä–æ—Ñ–∏–ª—å', '–°—Ç–µ–∫–ª–æ-—Å—Ç–µ–∫–ª–æ', '–°—Ç–µ–Ω–∞-—Å—Ç–µ–∫–ª–æ'],
      defaultServices: ['–î–æ—Å—Ç–∞–≤–∫–∞', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞'],
      customColorOption: false,
      exactHeightOption: false,
      defaultGlassColor: '–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π',
      defaultGlassThickness: '10',
      companyId,
      isActive: true,
    },
  ];

  return systemTemplates;
}

async function addSystemTemplatesToExistingCompanies() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/calculator');
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏
    const companies = await Company.find();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: ${companies.length}`);

    if (companies.length === 0) {
      console.log('‚ùå –ö–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      process.exit(1);
    }

    let totalAdded = 0;
    let totalErrors = 0;

    for (const company of companies) {
      try {
        console.log(`\nüè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é: ${company.name} (ID: ${company._id})`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        const existingSystemTemplates = await Template.find({
          companyId: company._id,
          isSystem: true,
          isActive: true,
        });

        if (existingSystemTemplates.length > 0) {
          console.log(
            `‚ö†Ô∏è  –£ –∫–æ–º–ø–∞–Ω–∏–∏ ${company.name} —É–∂–µ –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã (${existingSystemTemplates.length}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`,
          );
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        const systemTemplates = createSystemTemplatesForCompany(company._id);
        await Template.insertMany(systemTemplates, { ordered: false });

        console.log(
          `‚úÖ –°–æ–∑–¥–∞–Ω–æ ${systemTemplates.length} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: ${company.name}`,
        );
        totalAdded += systemTemplates.length;
      } catch (companyError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ ${company.name}:`, companyError.message);
        totalErrors++;
      }
    }

    console.log(`\nüìà –ò–¢–û–ì–ò:`);
    console.log(`‚úÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤: ${totalAdded}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${totalErrors}`);
    console.log(`üè¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: ${companies.length}`);
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  addSystemTemplatesToExistingCompanies();
}

module.exports = addSystemTemplatesToExistingCompanies;
