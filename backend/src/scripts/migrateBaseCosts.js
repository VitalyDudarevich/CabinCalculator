const mongoose = require('mongoose');
const dotenv = require('dotenv');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
dotenv.config();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/glass_calculator');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
};

// –°—Ö–µ–º—ã –º–æ–¥–µ–ª–µ–π
const settingSchema = new mongoose.Schema(
  {
    companyId: { type: mongoose.Schema.Types.ObjectId, ref: 'Company', required: true },
    currency: { type: String, enum: ['GEL', 'USD', 'RR'], default: 'GEL' },
    usdRate: { type: Number, default: 0 },
    rrRate: { type: Number, default: 0 },
    showUSD: { type: Boolean, default: false },
    showRR: { type: Boolean, default: false },
    baseCosts: [
      {
        id: { type: String, required: true },
        name: { type: String, required: true },
        value: { type: Number, required: true },
      },
    ],
    baseIsPercent: { type: Boolean, default: false },
    basePercentValue: { type: Number, default: 0 },
    customColorSurcharge: { type: Number, default: 0 },
    baseCostMode: { type: String, enum: ['fixed', 'percentage'], default: 'fixed' },
    baseCostPercentage: { type: Number, default: 0 },
  },
  { collection: 'settings' },
);

const baseCostSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
    },
    value: {
      type: Number,
      default: 0,
    },
    companyId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Company',
      required: true,
    },
  },
  { timestamps: true },
);

baseCostSchema.index({ name: 1, companyId: 1 }, { unique: true });

const Setting = mongoose.model('Setting', settingSchema);
const BaseCost = mongoose.model('BaseCost', baseCostSchema);

const migrateBaseCosts = async () => {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑–æ–≤—ã—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π...');

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –±–∞–∑–æ–≤—ã–º–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—è–º–∏
    const settingsWithBaseCosts = await Setting.find({
      baseCosts: { $exists: true, $ne: [] },
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${settingsWithBaseCosts.length} –∑–∞–ø–∏—Å–µ–π —Å –±–∞–∑–æ–≤—ã–º–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—è–º–∏`);

    let migratedCount = 0;
    let errorCount = 0;

    for (const setting of settingsWithBaseCosts) {
      console.log(`\nüè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é: ${setting.companyId}`);
      console.log(`üìù –ë–∞–∑–æ–≤—ã—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π: ${setting.baseCosts.length}`);

      for (const oldBaseCost of setting.baseCosts) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
          const existingBaseCost = await BaseCost.findOne({
            name: oldBaseCost.name,
            companyId: setting.companyId,
          });

          if (existingBaseCost) {
            console.log(`‚ö†Ô∏è  –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: "${oldBaseCost.name}"`);
            continue;
          }

          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
          const newBaseCost = new BaseCost({
            name: oldBaseCost.name,
            value: oldBaseCost.value || 0,
            companyId: setting.companyId,
          });

          await newBaseCost.save();
          console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: "${oldBaseCost.name}" = ${oldBaseCost.value}`);
          migratedCount++;
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ "${oldBaseCost.name}":`, error.message);
          errorCount++;
        }
      }
    }

    console.log(`\nüìà –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${migratedCount} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);

    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª—è–µ–º baseCosts –∏–∑ settings
    if (migratedCount > 0) {
      console.log('\nüßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ baseCosts –∏–∑ settings...');

      const updateResult = await Setting.updateMany(
        { baseCosts: { $exists: true } },
        { $unset: { baseCosts: '' } },
      );

      console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${updateResult.modifiedCount} –∑–∞–ø–∏—Å–µ–π settings`);
    }

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  }
};

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
const runMigration = async () => {
  await connectDB();
  await migrateBaseCosts();
  await mongoose.connection.close();
  console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  process.exit(0);
};

runMigration();
